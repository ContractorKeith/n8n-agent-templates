{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "b86d0ebe-535c-4a60-b052-a663772293a1",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2940,
        1980
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7ab380a2-a8d3-421c-ab4e-748ea8fb7904",
              "name": "response",
              "value": "Unable to perform task. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4dcb5c8d-5436-42af-bbc2-6964a757a533",
      "name": "Try Again",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4020,
        1800
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "={{$json.output}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ab85a626-4013-4aef-bb7d-59cd706ff5e0",
      "name": "Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3980,
        1500
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=# Overview\nYou are an email management assistant. All emails must be formatted professionally in HTML and signed off as \"Nate.\" \n\n**Email Management Tools**   \n   - Use \"Send Email\" to send emails.  \n   - Use \"Create Draft\" if the user asks for a draft.  \n   - Use \"Get Emails\" to retrieve emails when requested.\n   - Use \"Get Labels\" to retrieve labels.\n   - Use \"Mark Unread\" to mark an email as unread. You must use \"Get Emails\" first so you have the message ID of the email to flag.\n   - Use \"Label Email\" to flag an email. You must use \"Get Emails\" first so you have the message ID of the email to flag. Then you must use \"Get Labels\" so you have the label ID.\n   - Use \"Email Reply\" to reply to an email. You must use \"Get Emails\" first so you have the message ID of the email to reply to.\n\n## Final Notes\n- Here is the current date/time: {{ $now }}"
        }
      },
      "id": "580f9dbc-6924-4525-90e5-38f64267d005",
      "name": "Email Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        3380,
        1580
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        3100,
        2060
      ],
      "id": "e58c8e94-0c4f-4d93-a397-ede2b750c10e",
      "name": "Send Email",
      "webhookId": "86c8c4b1-13bb-4ebe-acb9-30e1d7082d55"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": "={{ $fromAI(\"limit\",\"how many emails the user wants\") }}",
        "simple": false,
        "filters": {
          "sender": "={{ $fromAI(\"sender\",\"who the emails are from\") }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        3740,
        2160
      ],
      "id": "48e24761-e993-455d-8cfb-acbf8c69cf40",
      "name": "Get Emails",
      "webhookId": "af4b3298-9037-44b0-aa12-2acbfbb5e66f"
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "html",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "sendTo": "={{ $fromAI(\"emailAddress\") }}"
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        3580,
        2180
      ],
      "id": "2b2a9f45-decb-4373-a51c-1f4bd0ba9bf0",
      "name": "Create Draft",
      "webhookId": "17016bce-d7d7-428a-a56c-f6ea122db8be"
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $fromAI(\"ID\",\"the message ID\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        3260,
        2120
      ],
      "id": "c00ec13d-1d92-4403-93c5-788eaf87eb31",
      "name": "Email Reply",
      "webhookId": "114785e6-a859-432b-81b4-c490c1c35b1c"
    },
    {
      "parameters": {
        "resource": "label",
        "returnAll": true
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        3860,
        2100
      ],
      "id": "89b0a63b-1026-48d1-b98b-77c4f4f59d29",
      "name": "Get Labels",
      "webhookId": "9e08b59e-792d-4566-83f1-9263c9ad86ae"
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $fromAI(\"ID\",\"the ID of the message\") }}",
        "labelIds": "={{ $fromAI(\"labelID\") }}"
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        3420,
        2160
      ],
      "id": "5cf33c40-e6f5-4892-9c4e-d56000978102",
      "name": "Label Emails",
      "webhookId": "0e951529-2e6d-40bf-ac40-fc0947e242e2"
    },
    {
      "parameters": {
        "operation": "markAsUnread",
        "messageId": "={{ $fromAI(\"messageID\") }}"
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        4000,
        2040
      ],
      "id": "c77db2b6-824c-424f-a8d9-e1d66c361699",
      "name": "Mark Unread",
      "webhookId": "a35af9d8-f67d-4ff9-803f-59ec6356e795"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        3140,
        1580
      ],
      "id": "bf3407f0-fcb1-4734-9042-aedd6795b384",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the internet",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"api_key\": \"your-api-key\",\n    \"query\": \"{searchTerm}\",\n    \"search_depth\": \"basic\",\n    \"include_answer\": true,\n    \"topic\": \"news\",\n    \"include_raw_content\": true,\n    \"max_results\": 3\n} ",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "searchTerm",
              "description": "What the user has requested to write a blog about",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        3320,
        1120
      ],
      "id": "17704909-8a43-40d2-bd90-93f456861b7a",
      "name": "Tavily"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query}}",
        "options": {
          "systemMessage": "=# Overview\nYou are a skilled AI blog writer specializing in engaging, well-structured, and informative content. Your writing style is clear, compelling, and tailored to the target audience. You optimize for readability, SEO, and value, ensuring blogs are well-researched, original, and free of fluff.\n\n## Tools\nTavily - Use this to search the web about the requested topic for the blog post.\n\n## Blog Requirements\nFormat all blog content in HTML, using proper headings (<h1>, <h2>), paragraphs (<p>), bullet points (<ul><li>), and links (<a href=\"URL\">) for citations. All citations from the Tavily tool must be preserved, with clickable hyperlinks so readers can access the original sources.\n\nMaintain a natural, human-like tone, use varied sentence structures, and include relevant examples or data when needed. Structure content for easy reading with concise paragraphs and logical flow. Always ensure factual accuracy and align the tone with the intended brand or purpose.\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3040,
        860
      ],
      "id": "3621d1f2-d409-4e6b-9eb7-332444956fe6",
      "name": "Content Creator Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        2960,
        1120
      ],
      "id": "98e2fcd1-0471-4c4b-a047-8325646e8e60",
      "name": "Anthropic Chat Model"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "14d9076e-27ea-4846-8b44-f83cf4022b9e",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3460,
        720
      ],
      "id": "056c234c-a6c1-4f5b-b010-8ccb906e476a",
      "name": "Response"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f2a8ff2d-6b59-4ad6-a2e7-8705354f4105",
              "name": "response",
              "value": "Error occurred. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3460,
        940
      ],
      "id": "3fe6d284-2703-4ad3-b4a4-240f6c611d12",
      "name": "Try Again2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=# Overview\nYou are the ultimate personal assistant. Your job is to send the user's query to the correct tool. You should never be writing emails, or creating even summaries, you just need to call the correct tool.\n\n## Tools\n- emailAgent: Use this tool to take action in email\n- calendarAgent: Use this tool to take action in calendar\n- contactAgent: Use this tool to get, update, or add contacts\n- contentCreator: Use this tool to create blog posts\n- Tavily: Use this tool to search the web\n\n## Rules\n- Some actions require you to look up contact information first. For the following actions, you must get contact information and send that to the agent who needs it:\n  - sending emails\n  - drafting emails\n  - creating calendar event with attendee\n\n## Examples\n1) \n- Input: send an email to nate herkelman asking him what time he wants to leave\n  - Action: Use contactAgent to get nate herkelman's email\n  - Action: Use emailAgent to send the email. You will pass the tool a query like \"send nate herkelman an email to ask what time he wants to leave. here is his email: [email address]\n- Output: The email has been sent to Nate Herkelman. Anything else I can help you with?\n\n\n## Final Reminders\nHere is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3260,
        -440
      ],
      "id": "96ff31a3-f45d-4a9a-b202-6da47b741a19",
      "name": "Ultimate Assistant"
    },
    {
      "parameters": {
        "name": "contactAgent",
        "description": "Call this tool for any contact related actions.",
        "workflowId": {
          "__rl": true,
          "value": "IsSUyrla7wc1cDLE",
          "mode": "list",
          "cachedResultName": "🤖Contact Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3300,
        180
      ],
      "id": "024746e3-ed8b-4fcc-93f2-82a32f409c7e",
      "name": "Contact Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2900,
        100
      ],
      "id": "3ae3b217-57f0-402e-8c25-4575efacaeb4",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        3640,
        0
      ],
      "id": "b241921b-8b00-4b46-9e43-a9498628908c",
      "name": "Calculator"
    },
    {
      "parameters": {
        "name": "calendarAgent",
        "description": "Call this tool for any calendar action.",
        "workflowId": {
          "__rl": true,
          "value": "0NtlJ41IozGhtFa6",
          "mode": "list",
          "cachedResultName": "🤖Calendar Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3160,
        180
      ],
      "id": "86f58e5f-cc41-4d43-aaf8-e8d1717ad604",
      "name": "Calendar Agent"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "75153bf4-deab-4b5c-8da7-ca80a67bae15",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        2440,
        -300
      ],
      "webhookId": "99eab1a0-569d-4f0f-a49e-578a02abfe63"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe7ecc99-e1e8-4a5e-bdd6-6fce9757b234",
              "name": "text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "cda78841-8070-4540-9982-4b5d5162d7e1",
      "name": "Set 'Text'",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2860,
        -240
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8c844924-b2ed-48b0-935c-c66a8fd0c778",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "id": "44cdbb5e-b003-4172-b4c1-76f21dcc53ff",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2600,
        -300
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}"
      },
      "id": "8c2beee5-ae20-4d37-bca7-7e1a5598bc5e",
      "name": "Download File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2880,
        -460
      ],
      "webhookId": "83bb7385-33f6-4105-8294-1a91c0ebbee5"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "5835033c-9e3b-4d49-8112-9979b3bef6f2",
      "name": "Transcribe",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        3000,
        -460
      ]
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2800,
        0
      ],
      "id": "ebe2274b-c1e6-46ea-8094-ad9bae7ee9aa",
      "name": "OpenAI Chat Model1",
      "credentials": {}
    },
    {
      "parameters": {
        "name": "emailAgent",
        "description": "Call this tool for any email actions.",
        "workflowId": {
          "__rl": true,
          "value": "C3hLlOS4O6ZJtVFy",
          "mode": "list",
          "cachedResultName": "🤖Email Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3020,
        160
      ],
      "id": "9e5b6d64-d332-4ea4-8d97-5899659beeae",
      "name": "Email Agent1"
    },
    {
      "parameters": {
        "name": "contentCreator",
        "description": "Call this tool to create blog posts.",
        "workflowId": {
          "__rl": true,
          "value": "WWSu94V939ATcqvi",
          "mode": "list",
          "cachedResultName": "🤖Content Creator Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3420,
        140
      ],
      "id": "d9b61910-3c13-457d-98be-5d8281b90590",
      "name": "Content Creator Agent1"
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the internet",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"api_key\": \"your-api-key\",\n    \"query\": \"{searchTerm}\",\n    \"search_depth\": \"basic\",\n    \"include_answer\": true,\n    \"topic\": \"news\",\n    \"include_raw_content\": true,\n    \"max_results\": 3\n} ",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "searchTerm",
              "description": "What the user has requested to search the internet for",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        3580,
        120
      ],
      "id": "98004e84-5a15-4f1e-972d-89d4df376dd4",
      "name": "Tavily1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "30cab19d-d133-4143-922c-04a5ac8957ae",
      "name": "Response1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3580,
        -300
      ],
      "webhookId": "5dced4b9-5066-4036-a4d4-14fc07edd53c"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -3500,
        1380
      ],
      "id": "239e3a55-e259-4020-922c-b1d869e7e59e",
      "name": "Create Event with Attendee",
      "credentials": {}
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -3620,
        1420
      ],
      "id": "c2edc12d-9ac2-4f94-bec4-b6aa389139b4",
      "name": "Create Event",
      "credentials": {}
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -3740,
        1420
      ],
      "id": "4ef56fc9-1ffe-46bd-9068-db0659a1a1da",
      "name": "Get Events",
      "credentials": {}
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -3860,
        1420
      ],
      "id": "f8cdb85f-48ff-4625-94a9-235dc8224681",
      "name": "Delete Event",
      "credentials": {}
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -3980,
        1400
      ],
      "id": "c5656255-8848-4661-b4f8-fcaa3f593618",
      "name": "Update Event",
      "credentials": {}
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "536e5f81-1d45-4ab5-8dc1-04dd000d1c49",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -4100,
        1360
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7ab380a2-a8d3-421c-ab4e-748ea8fb7904",
              "name": "response",
              "value": "Unable to perform task. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "1c1081fc-c470-4798-82b4-1926e8c5c212",
      "name": "Try Again1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3440,
        1240
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "={{$json.output}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "1b319fdf-75c4-4846-af6f-59aa04ecb47b",
      "name": "Success1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3440,
        1040
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a calendar assistant. Your responsibilities include creating, getting, and deleting events in the user's calendar.\n\n**Calendar Management Tools**  \n   - Use \"Create Event with Attendee\" when an event includes a participant.  \n   - Use \"Create Event\" for solo events.   \n   - Use \"Get Events\" to fetch calendar schedules when requested.\n   - Use \"Delete Event\" to delete an event. You must use \"Get Events\" first to get the ID of the event to delete.\n   - Use \"Update Event\" to update an event. You must use \"Get Events\" first to get the ID of the event to update.\n\n## Final Notes\nHere is the current date/time: {{ $now }}\nIf a duration for an event isn't specified, assume it will be one hour."
        }
      },
      "id": "c311cd49-9cef-40a5-9ebb-51e7e6501b3c",
      "name": "Calendar Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -3900,
        1160
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appK0rbtvf9e7vt6w",
          "mode": "list",
          "cachedResultName": "Contacts",
          "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w"
        },
        "table": {
          "__rl": true,
          "value": "tbl08JGCfUK1RhXsG",
          "mode": "list",
          "cachedResultName": "Contacts",
          "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w/tbl08JGCfUK1RhXsG"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        1680,
        2980
      ],
      "id": "620511c9-8f72-4a39-9b3d-b37c956ad482",
      "name": "Get Contacts"
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "appK0rbtvf9e7vt6w",
          "mode": "list",
          "cachedResultName": "Contacts",
          "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w"
        },
        "table": {
          "__rl": true,
          "value": "tbl08JGCfUK1RhXsG",
          "mode": "list",
          "cachedResultName": "Contacts",
          "cachedResultUrl": "https://airtable.com/appK0rbtvf9e7vt6w/tbl08JGCfUK1RhXsG"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $fromAI(\"name\") }}",
            "email": "={{ $fromAI(\"emailAddress\") }}",
            "phoneNumber": "={{ $fromAI(\"phoneNumber\") }}"
          },
          "matchingColumns": [
            "name"
          ],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "phoneNumber",
              "displayName": "phoneNumber",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        1840,
        2980
      ],
      "id": "87bdc4ca-ecea-48b7-8284-9080bdb9e567",
      "name": "Add or Update Contact"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1500,
        2980
      ],
      "id": "6706c85d-7104-4b58-bed5-60fb6f367f6f",
      "name": "OpenAI Chat Model3",
      "credentials": {}
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a contact management assistant. Your responsibilities include looking up contacts, adding new contacts, or updating a contact's information.\n\n**Contact Management**  \n   - Use \"Get Contacts\" to retrieve contact information. \n   - Use \"Add or Update Contact\" to store new contact information or modify existing entries. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1620,
        2760
      ],
      "id": "e7998320-0418-4cc5-9ecd-64f4062c4ed4",
      "name": "Contact Agent1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4f360190-a717-4a93-8336-d03ea65975d5",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2100,
        2640
      ],
      "id": "de5e32ec-1dc5-4742-80f6-5a5aa70a7263",
      "name": "Response2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4f360190-a717-4a93-8336-d03ea65975d5",
              "name": "response",
              "value": "An error occurred. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2140,
        2860
      ],
      "id": "3bf397a4-61be-4dd1-bfdd-02b721f5dde2",
      "name": "Try Again3"
    },
    {
      "parameters": {
        "formTitle": "Newsletter Submission Form",
        "formDescription": "Provides a structured newsletter based on the following fields.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Topic",
              "placeholder": "Voice AI",
              "requiredField": true
            },
            {
              "fieldLabel": "Tone",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Professional"
                  },
                  {
                    "option": "Funny"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Target Audience",
              "placeholder": "Dentist Offices",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -4920,
        5380
      ],
      "id": "b67b7e49-3e1f-4ae5-8526-30f74b6e986b",
      "name": "On form submission",
      "webhookId": "4f9e114e-fb68-404a-9fd5-2b3310e061fd"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Newsletter Topic: {{ $json.Topic }}\nNewsletter Tone: {{ $json.Tone }}\nNewsletter Target Audience: {{ $json['Target Audience'] }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for planning the sections of a newsletter by creating an engaging table of contents tailored to the newsletter's topic, tone, and target audience.  \n\n## Context  \n- The newsletter will vary in topic, tone, and target audience depending on the request.  \n- Your role is to use the \"tavily\" tool to search for relevant topics and craft a high-level, engaging table of contents.  \n- The table of contents should resonate with the target audience and encourage them to read the full newsletter.  \n\n## Instructions  \n1. Analyze the incoming information, including the newsletter topic, tone, and target audience details.  \n2. Use the \"tavily\" tool to research relevant and trending subtopics related to the main newsletter topic.  \n3. Based on your findings, create a table of contents with high-level, engaging topics tailored to the target audience.  \n4. Ensure the topics align with the newsletter's tone and are structured to maintain the reader's interest.  \n5. Include brief descriptions for each section if requested.  \n\n## Tools  \n- tavily tool for internet research  \n- Predefined audience profiles (if provided)  \n\n## Examples  \n- **Input:**  \n  - Topic: \"Sustainable Living\"  \n  - Tone: Informative yet approachable  \n  - Target Audience: Young adults interested in eco-friendly lifestyles  \n\n- **Output:**  \n  Table of Contents:  \n  1. \"What is Sustainable Living? A Beginner’s Guide\"  \n  2. \"Top 10 Small Changes for a Big Impact\"  \n  3. \"The Science Behind Sustainability: Why It Matters\"  \n  4. \"Spotlight on Innovations: Green Tech of 2025\"  \n  5. \"Inspiration Corner: Stories of Everyday Eco-Warriors\"  \n\n- **Input:**  \n  - Topic: \"Remote Work Tips\"  \n  - Tone: Professional yet motivational  \n  - Target Audience: Corporate professionals transitioning to remote work  \n\n- **Output:**  \n  Table of Contents:  \n  1. \"Remote Work Revolution: Adapting to the New Norm\"  \n  2. \"Home Office Hacks for Maximum Productivity\"  \n  3. \"Balancing Act: Work-Life Harmony Tips\"  \n  4. \"Top Collaboration Tools Every Remote Team Needs\"  \n  5. \"Success Stories: How Remote Work Changed Lives\"  \n\n## SOP (Standard Operating Procedure)  \n1. Review the provided details about the newsletter's topic, tone, and target audience.  \n2. Use the \"tavily\" tool to search for trending, relevant, and engaging subtopics.  \n3. Brainstorm 4-6 high-level topics that fit within the theme of the newsletter and appeal to the target audience.  \n4. Verify that each section aligns with the tone and goals of the newsletter.  \n5. Finalize the table of contents and, if requested, provide brief descriptions for each section.  \n\n## Final Notes  \n- Keep the topics concise and engaging to maximize interest.  \n- Adapt your tone and choice of topics to suit the specific audience profile.  \n- Always aim for a balance of informative and engaging content to maintain readership.  \n---  \nHere is the current date {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -4720,
        5420
      ],
      "id": "9e5fbe25-c7c6-4e59-a0d0-6ebd72231962",
      "name": "Newsletter Expert"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Your job is to split out the table of contents into an individual item for each section. Output each section separately in a field called \"newsletterSections\". When doing so, keep in mind that the newsletter target audience is {{ $('On form submission').item.json['Target Audience'] }} and the tone of the newsletter should be {{ $('On form submission').item.json.Tone }}\n\nHere is the table of contents: {{ $json.output }}\n\n",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -4420,
        5380
      ],
      "id": "152148e5-5df4-4e2c-bbc4-6d794f614505",
      "name": "Project Planner"
    },
    {
      "parameters": {
        "fieldToSplitOut": " message.content.newsletterSections",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -4100,
        5380
      ],
      "id": "7be34894-8611-478a-860c-be5b585be80c",
      "name": "Split Out"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Section Title: {{ $('Split Out').item.json.title }}\n\nSection Description: {{ $('Split Out').item.json.description }}\n\nNewsletter Target Audience: {{ $('On form submission').item.json['Target Audience'] }}\n\nNewsletter Tone: {{ $('On form submission').item.json.Tone }}",
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for delivering only the final content for a newsletter section. Your role is to produce concise, well-researched, and audience-tailored content based solely on the provided inputs, with no prefacing statements or explanations.  \n\n## Context  \n- All necessary details, including the section title, description, target audience, and tone, will be provided.  \n- The goal is to create engaging content that aligns with the audience's expectations and the newsletter's objectives.  \n- Content must be supported by research, with sources clearly cited using hyperlinks.  \n\n## Instructions  \n1. Write the final content without including any introductory or concluding remarks about the writing process.  \n2. Conduct research using the tavily tool to ensure credibility and relevance.  \n3. Use the provided inputs to craft a focused section tailored to the target audience.  \n4. Include citations seamlessly within the content using hyperlinks to the original sources.  \n\n## Tools  \n- tavily (for research and citations). \n\n## Citation Guidelines\n- Use the tavily tool to gather information and cite sources\n- For each major claim or piece of information, include a hyperlinked inline citation\n- Format citations as HTML links with descriptive text:\n  <a href=\"[URL]\">[Source: Publication Name]</a>\n- When directly quoting from a source, use quotation marks and include the citation\n\n## Examples  \n- **Input**:  \n  - Section Title: \"The Psychology of Happy Patients\"  \n  - Description: Discuss strategies dental offices can use to improve patient experiences and satisfaction, such as personalized care and stress-reducing techniques.  \n  - Target Audience: Dentists and dental practice managers.  \n  - Tone: Informative yet approachable.  \n- **Output**:  \n  \"Creating a positive patient experience starts with understanding the key drivers of satisfaction in dental care. Personalized care, such as addressing individual patient concerns and tailoring treatments, can significantly boost trust and comfort [Source](https://example.com/personalized-care). Stress-reducing techniques, like offering noise-canceling headphones or aromatherapy in waiting rooms, have also been shown to alleviate anxiety and improve overall impressions of care [Source](https://example.com/stress-reduction). By focusing on these elements, dental practices can foster happier, more loyal patients.\"  \n\n## SOP (Standard Operating Procedure)  \n1. **Input Analysis**: Understand the section's title, description, target audience, and tone.  \n2. **Research**: Use the tavily tool to gather relevant, credible information.  \n3. **Content Writing**: Craft a section based on the provided inputs, ensuring it is directly usable in the newsletter.  \n4. **Cite Sources**: Integrate hyperlinks to all references within the content.  \n5. **Review and Deliver**: Proofread the content to ensure clarity, accuracy, and alignment with the target audience.  \n\n## Final Notes  \n- The output must start directly with the content, without introductory or transitional phrases.  \n- All sources must be clearly cited and integrated naturally into the text.  \n- Focus on delivering value and ensuring readability for the target audience.  \n---  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -3860,
        5280
      ],
      "id": "31208279-7681-4434-828a-e662a2e3e335",
      "name": "Research Team"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -3500,
        5360
      ],
      "id": "e487d805-b4ce-496d-922c-a1e1dd68b518",
      "name": "Merge"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "title"
            },
            {
              "fieldToAggregate": "output"
            }
          ]
        },
        "options": {
          "mergeLists": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3320,
        5360
      ],
      "id": "30050685-7ce4-4257-a044-637d0f039ff7",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=List of titles: {{ $json.title }}\nList of article content: {{ $json.output }}",
        "options": {
          "systemMessage": "=## Overview\nYou are an expert editor specializing in creating and refining content to output a high quality, formatted article. You are given a list of titles and outputs and you will use these to create a newsletter tailored towards the defined target audience. Create a section in the article for each title, with a hyperlinked source in each section based on the content.\n\n## Objective\n1. Create content for each title using the provided content\n2. Each section should contain inline citations *Don't leave any out*\n3. Improve the flow of the newsletter and format it for readability\n\n## Citation Management\n1. Preserve all inline citations\n2. Standardize citation format\n3. Ensure citations don't disrupt the flow of reading\n\n## Source Section\n1. Create ONE \"Sources\" section at the end of the newsletter\n2. Format each source entry consistently: \n   <li><a href=\"[URL]\">[Publication Name] - [Article Title]</a></li>\n3. Include complete URL for each source\n4. Organize all sources alphabetically\n5. Verify all links are functional\n\n## Output Format\nThe newsletter should be structured as HTML that will be sent through email:\n- Do not output a title or an introduction, the output should start with the first article heading\n- Main content with hyperlink citations in each section.\n- Headers for each section of the article\n- Sources section at the end with all links\n\n## Important ##\nOutput 1000 words maximum or else the automation breaks!\n\nToday's date is {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -3160,
        5360
      ],
      "id": "974d3999-2652-4488-9540-aced0a0f434d",
      "name": "Editor"
    },
    {
      "parameters": {
        "subject": "={{ $json.message.content }}",
        "message": "={{ $('Editor').item.json.output }}",
        "options": {
          "appendAttribution": false,
          "senderName": "Daily Newsletter"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2500,
        5360
      ],
      "id": "6692dd1b-1493-41a9-89e7-9cbc11488eb8",
      "name": "Send Newsletter",
      "webhookId": "1c988659-2d0a-4471-a1c9-331dccdde458"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Create a title for the incoming newsletter. The tone of the newsletter is {{ $('On form submission').item.json.Tone }} and the target audience is {{ $('On form submission').item.json['Target Audience'] }}.\n\nHere is the newsletter:\n{{ $json.output }}\n\n# Output format\nOutput the title in plain text, no quotation marks, and capitalize the first letter of each word.\nExample: Is Artificial Intelligence A Friend Or Foe?",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2820,
        5360
      ],
      "id": "274e59af-90cc-4c9c-8bd4-484d6f66ebd0",
      "name": "Create TItle"
    },
    {
      "parameters": {
        "name": "tavily",
        "description": "Call this tool to search the internet\n",
        "workflowId": {
          "__rl": true,
          "value": "0Kc1NijwnVGUQOUB",
          "mode": "list",
          "cachedResultName": "Tavily Tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        -3880,
        5620
      ],
      "id": "0c4e9d46-b5de-4337-b7e8-71fe58d32520",
      "name": "tavily"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ae0dd90-d1d0-494b-bd8b-1ef335f0bd8f",
              "name": "response",
              "value": "=[Source 1]\nURL: {{ $json.results[0].url }}\nContent: {{ $json.results[0].content }}\n\n[Source 2]\nURL: {{ $json.results[1].url }}\nContent: {{ $json.results[1].content }}\n\n[Source 2]\nURL: {{ $json.results[2].url }}\nContent: {{ $json.results[2].content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3540,
        6040
      ],
      "id": "dc02d0cb-92fe-4abd-80ff-d075e0b9b0e1",
      "name": "response"
    },
    {
      "parameters": {
        "content": "# Newsletter Automation\n",
        "height": 740,
        "width": 2840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5020,
        5140
      ],
      "typeVersion": 1,
      "id": "a1ca605b-0f5f-4b66-a711-80d3cd5eea50",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Tavily Tool",
        "height": 300,
        "width": 700,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4020,
        5940
      ],
      "typeVersion": 1,
      "id": "727e2087-73f2-43e5-9568-c940bf114dd4",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "\n",
        "height": 180,
        "width": 200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3820,
        5700
      ],
      "typeVersion": 1,
      "id": "5a75dc04-6239-4762-b786-798fb5705293",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "Newsletter AI Automation",
        "height": 80,
        "width": 500
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3960,
        5160
      ],
      "typeVersion": 1,
      "id": "13c9a183-405e-4cfc-a1c9-f88cc4999dc4",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -4760,
        5620
      ],
      "id": "0bd6e093-50ef-4a4a-b552-825ea8466de5",
      "name": "OpenAI Chat Model4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        -3640,
        5620
      ],
      "id": "c3c86ce6-b579-470e-89e2-4a8f2a259f50",
      "name": "Anthropic Chat Model1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"api_key\": \"YOUR API KEY\",\n    \"query\": \"{{ $json.query.replace(/\"/g, '\\\\\"') }}\",\n    \"search_depth\": \"basic\",\n    \"include_answer\": true,\n    \"topic\": \"news\",\n    \"include_raw_content\": true,\n    \"max_results\": 3\n} ",
        "options": {}
      },
      "id": "1b51329b-c46f-441c-8063-72a4bac0df6a",
      "name": "Tavily2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3880,
        6040
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "17rTnGg9telKLqqWrNlyzngatwyVYUwn9eXkQLBtJ-Ys",
          "mode": "list",
          "cachedResultName": "Projects",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17rTnGg9telKLqqWrNlyzngatwyVYUwn9eXkQLBtJ-Ys/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17rTnGg9telKLqqWrNlyzngatwyVYUwn9eXkQLBtJ-Ys/edit#gid=0"
        },
        "options": {}
      },
      "id": "96cd724f-5f1a-4f0a-abde-4701b57ef7b1",
      "name": "Get Projects",
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        -420,
        1640
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "17rTnGg9telKLqqWrNlyzngatwyVYUwn9eXkQLBtJ-Ys",
          "mode": "list",
          "cachedResultName": "Projects",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17rTnGg9telKLqqWrNlyzngatwyVYUwn9eXkQLBtJ-Ys/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17rTnGg9telKLqqWrNlyzngatwyVYUwn9eXkQLBtJ-Ys/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Project": "={{ $fromAI(\"project\") }}",
            "Notes": "={{ $fromAI(\"notes\") }}",
            "Status": "={{ $fromAI(\"status\") }}"
          },
          "matchingColumns": [
            "Project"
          ],
          "schema": [
            {
              "id": "Project",
              "displayName": "Project",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "cb6b35de-3997-42cc-b2a8-fc4650527323",
      "name": "Update Projects",
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        -240,
        1580
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.query}}",
        "options": {
          "systemMessage": "=You are a google sheets agent. Your job is to take the user query and decide which tool to use to get the job done. \n\nYour tools:\nAdd Contact\nUse this tool to add a contact to the contact database\n\nUpdate Contact\nUse this tool to update a row for a specific contact. The fields for a contact are Name, Email, and Phone Number. If not all of these are specified to update, then keep them as they are. Example, if we want to update Nate Herk's email, pass along the updated email, but keep the current Name and Phone Number the same. \n\nGet Projects\nUse this tool to get project information and summarize it.\n\nUpdate Projects\nUse this tool to update a row for a specific contact. The fields for a contact are Project, Notes, and Status. If not all of these are specified to update, then keep them as they are. "
        }
      },
      "id": "84b020d1-cc2a-408c-85c8-596c8ca53bdc",
      "name": "Projects Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -560,
        1360
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "08b2c67d-17ec-4880-8842-614eb79e9bc1",
      "name": "OpenAI Chat Model5",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -740,
        1580
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7ab380a2-a8d3-421c-ab4e-748ea8fb7904",
              "name": "response",
              "value": "Unable to perform task. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "610077cc-6fe4-4d3b-9d1d-9ef2cf06361a",
      "name": "Try Again4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -20,
        1480
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "={{$json.output}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9bd6122f-2190-4a62-8335-425c3221fa57",
      "name": "Success2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -20,
        1240
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C07U1V6UH3Q",
          "mode": "list",
          "cachedResultName": "youtubetesting"
        },
        "text": "={{ $fromAI(\"message\",\"the message the user wants to send in Slack\") }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "2b9a3fe8-d1cf-4b37-b9a4-3bd20d4c3004",
      "name": "Send Slack Message",
      "type": "n8n-nodes-base.slackTool",
      "typeVersion": 2.2,
      "position": [
        1000,
        180
      ],
      "webhookId": "fdbeb08e-fe34-45d3-a124-043ac6aa74a9"
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "sample",
          "mode": "list",
          "cachedResultName": "sample"
        },
        "options": {
          "pineconeNamespace": "demo"
        }
      },
      "id": "43f9f2fd-619f-4df9-9e20-ec401f469116",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        1700,
        340
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "75dcc52e-a1a3-4e77-9820-5a8236553b13",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1580,
        480
      ]
    },
    {
      "parameters": {
        "name": "Knowledge_Base",
        "description": "Call this tool to get information about the company."
      },
      "id": "be157d32-cd3b-46ea-ac45-96a094d61b9b",
      "name": "Knowledge Base",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        1740,
        200
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to get contact data like email address or phone number",
        "documentId": {
          "__rl": true,
          "value": "19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA",
          "mode": "list",
          "cachedResultName": "Contact Database",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA/edit#gid=0"
        },
        "options": {}
      },
      "id": "0eeb6592-125b-4ade-b5b7-1dc935a670c1",
      "name": "Contacts Data",
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        880,
        180
      ]
    },
    {
      "parameters": {
        "name": "Calendar_Agent",
        "description": "Call this tool to take actions within Calendar",
        "workflowId": {
          "__rl": true,
          "value": "0NtlJ41IozGhtFa6",
          "mode": "list",
          "cachedResultName": "🤖Calendar Agent"
        }
      },
      "id": "a0c853bd-2148-4dc7-a2dc-f912fdfc6962",
      "name": "🤖Calendar_Agent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1260,
        180
      ]
    },
    {
      "parameters": {
        "name": "Research_Agent",
        "description": "Call this tool to search through Wikipedia, articles, or google to answer the user's question.",
        "workflowId": {
          "__rl": true,
          "value": "Hgm5BTXAKjDnLOof",
          "mode": "list",
          "cachedResultName": "🤖Research Agent"
        }
      },
      "id": "c3da4dd3-0751-410a-83a4-84ffbaa9f940",
      "name": "🤖Research_Agent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1440,
        220
      ]
    },
    {
      "parameters": {
        "name": "Projects_Agent",
        "description": "Call this tool to take action on our projects.",
        "workflowId": {
          "__rl": true,
          "value": "3Hkxr6wonWWvR9jB",
          "mode": "list",
          "cachedResultName": "🤖Projects Agent"
        }
      },
      "id": "5565c3a9-7a66-4bb2-9a76-cf2846dc9ba0",
      "name": "🤖Projects_Agent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1580,
        220
      ]
    },
    {
      "parameters": {
        "name": "Email_Agent",
        "description": "Call this tool to take any email actions",
        "workflowId": {
          "__rl": true,
          "value": "C3hLlOS4O6ZJtVFy",
          "mode": "list",
          "cachedResultName": "🤖Email Agent"
        }
      },
      "id": "0775fce0-5cd0-45cc-bbf1-96ffdc6b3df6",
      "name": "🤖___Email_Agent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        1140,
        180
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger1').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "b96d5ec5-7ca6-4381-9cae-f013c6d3e352",
      "name": "Respond to Me",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1620,
        -340
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=You are a personal assistant AI Agent designed to handle various tasks efficiently. Your primary role is to manage contacts, emails, and calendar events for the user. You have access to three tools to help you fulfill requests:\n\nContacts Data: Use this when you need to look up contact information like an email address. You need to use this tool BEFORE sending an email or BEFORE getting emails.\n\nEmail Agent: Use this for handling all email-related actions, like sending messages, setting up replies, or forwarding emails.\n\nCalendar Agent: Use this for scheduling, updating, or managing calendar events.\n\nSend Slack Message: Use this to send a message in Slack.\n\nProjects_Agent: Use this tool to access our projects. We can update our projects of get information on our projects.\n\nWhen a task requires using one or more of these tools, make sure to identify which tool is most appropriate, pass along the relevant details, and execute the actions needed to complete the task. Your goal is to be proactive, precise, and organized in managing these resources to provide a smooth experience for the user.\n\nHere is the current time/date: {{ $now.format('DD')}}"
        }
      },
      "id": "f066948b-6786-4dc2-9f3f-65b1e4dc0816",
      "name": "Personal Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        1300,
        -340
      ],
      "retryOnFail": false
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "62083ca8-7436-40ec-b051-662df47539c2",
      "name": "OpenAI Chat Model6",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        740,
        180
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "7c94449e-06eb-4995-a241-d9fd43894775",
      "name": "OpenAI Chat Model7",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2060,
        320
      ]
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "2dddf053-41a7-4e25-b975-1feeba1c3d07",
      "name": "Telegram Trigger1",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        1140,
        -340
      ],
      "webhookId": "2194a6b2-2302-4406-9c8c-207161b7eb22"
    },
    {
      "parameters": {},
      "id": "45dc1209-1b8f-4c6b-abd0-c9b9df679d2c",
      "name": "Calculator1",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        2020,
        80
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2c8b7a3b-584a-41d3-9652-91686ed30596",
      "name": "SerpAPI",
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        200,
        5660
      ]
    },
    {
      "parameters": {},
      "id": "5f65d9b0-c59b-47a7-a55b-56c3f37500e5",
      "name": "Wikipedia",
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "typeVersion": 1,
      "position": [
        -80,
        5660
      ]
    },
    {
      "parameters": {
        "resource": "all",
        "limit": "={{ $fromAI(\"limit\",\"number of articles\") }}",
        "additionalFields": {
          "keyword": "={{ $fromAI(\"keywords\",\"keywords for the articles\") }}"
        }
      },
      "id": "a0d540d3-da46-446a-af8c-1737fac97715",
      "name": "Hacker News",
      "type": "n8n-nodes-base.hackerNewsTool",
      "typeVersion": 1,
      "position": [
        60,
        5660
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "You are a research assistant agent. You have Wikipedia, Hacker News API, and Serp API at your disposal. \n\nTo answer the user's question, first search wikipedia. If you can't find your answer there, then search articles using Hacker News API. If that doesn't work either, then use Serp API to answer the user's question.\n"
        }
      },
      "id": "be01f309-47a1-479b-b6a3-6372f2bbdbbc",
      "name": "Research Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -120,
        5400
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "b8c066c7-6294-4bc7-a14f-d8ac9bc368a8",
      "name": "OpenAI Chat Model8",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -220,
        5660
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7ab380a2-a8d3-421c-ab4e-748ea8fb7904",
              "name": "response",
              "value": "Unable to perform task. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "58124522-23c2-4498-a298-aa1b50505d5c",
      "name": "Try Again5",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        5520
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "={{$json.output}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9f5f68a4-38a6-4e9c-8c80-a1f68c22e4eb",
      "name": "Success3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        5320
      ]
    },
    {
      "parameters": {
        "name": "getChart",
        "description": "Call this tool to get an analysis of a requested stock. The URL that is output from this tool must be returned in markdown format. For example, ![](url)",
        "workflowId": {
          "__rl": true,
          "value": "Z0tvocbfCmqgEWDS",
          "mode": "list",
          "cachedResultName": "🛠️Get & Analyze Chart"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        3860,
        5960
      ],
      "id": "43e23c65-80dc-4c07-879f-a67be97e8022",
      "name": "Get Chart"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent specializing in discussing financial topics and analyzing stocks. Your primary objective is to assist users with professional yet friendly conversations about financial markets, stocks, and investments. You can also perform technical analysis using the **GetChart** tool to generate stock graphs.  \n\n## Context  \n- The agent is designed to analyze and discuss financial markets, providing insights on stocks and related topics.  \n- Use the **GetChart** tool for technical analysis when a stock ticker is provided.  \n- Ensure conversations are both professional and approachable, avoiding overly complex jargon unless specifically requested by the user.  \n- The agent should never give explicit financial advice (e.g., \"buy\" or \"sell\" recommendations).  \n\n## Instructions  \n1. Greet the user in a friendly and professional manner.  \n2. Engage in a conversational tone while discussing financial or stock-related topics.  \n3. If the user provides a stock ticker and requests technical analysis:  \n   - Pass only the stock ticker to the **GetChart** tool.  \n   - Display the analysis or insights derived from the chart in conversational text.  \n4. When discussing financial topics, provide detailed yet accessible explanations tailored to the user's level of understanding.  \n5. Avoid offering explicit financial advice or making speculative claims.  \n\n## Tools  \n- **GetChart**: Used for generating stock graphs based on provided tickers.  \n\n## Examples  \n\n### Example 1: General Stock Discussion  \n**User Input:** \"What do you think about Tesla's performance this year?\"  \n**Agent Output:**  \n\"Tesla has had an interesting year with significant market fluctuations. Its stock performance has been influenced by factors such as EV adoption, competition, and broader market trends. Would you like a technical analysis of its stock performance?\"  \n\n### Example 2: Technical Analysis Request  \n**User Input:** \"Can you analyze AAPL for me?\"  \n**Agent Output:**  \n\"Sure! I’ve analyzed AAPL for you. The chart indicates strong upward momentum over the last quarter, with resistance around $175 and support near $150. Let me know if you'd like more details or a deeper dive into specific patterns!\"  \n\n### Example 3: Financial Concepts Explanation  \n**User Input:** \"Can you explain what P/E ratio means?\"  \n**Agent Output:**  \n\"Of course! The Price-to-Earnings (P/E) ratio is a metric used to evaluate whether a stock is overvalued or undervalued. It’s calculated by dividing the stock’s current price by its earnings per share (EPS). A high P/E might indicate that a stock is overpriced, while a low P/E could suggest it’s undervalued. Let me know if you’d like to explore this further!\"  \n\n## SOP (Standard Operating Procedure)  \n1. **Engage with the user:** Respond professionally and in a friendly tone.  \n2. **Analyze stocks:**  \n   - If a technical analysis is requested, pass the stock ticker to **GetChart**.  \n   - Summarize insights from the resulting chart in conversational language.  \n3. **Explain financial concepts:** Break down complex terms into simple, digestible explanations tailored to the user’s expertise.  \n4. **Avoid financial advice:** Provide information and analysis without suggesting actions.  \n5. **Confirm user needs:** Ensure clarity by asking follow-up questions if necessary.  \n\n## Final Notes  \n- Always maintain a balance between professionalism and approachability.  \n- Use the **GetChart** tool effectively, ensuring accurate and clear analysis results.  \n- Avoid making financial predictions or recommendations. Focus on educating and informing the user.  \n---  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3600,
        5740
      ],
      "id": "183bd659-578c-4f6c-9188-213ba35839cf",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger2').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3920,
        5740
      ],
      "id": "c96e114b-6554-4f0d-8dcc-ac29571664de",
      "name": "Send Analysis"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "text": "=# Role\n\nYou are an expert financial analyst specializing in technical analysis of stock charts. Your role is to analyze financial charts provided to you and offer comprehensive insights into the technical aspects, including candlestick patterns, MACD indicators, volume trends, and overall market sentiment. You must provide a detailed breakdown of the chart, highlighting key areas of interest and actionable insights.\n\nWhen analyzing a stock chart, always include the following:\n\n1. **Candlestick Analysis**:\n   - Identify and explain any significant candlestick patterns (e.g., bullish engulfing, doji, hammer).\n   - Comment on the overall trend (bullish, bearish, or sideways).\n   - Highlight any breakout or pullback zones.\n\n2. **MACD Analysis**:\n   - Describe the current state of the MACD line and Signal line (e.g., bullish crossover, bearish crossover).\n   - Discuss the MACD histogram and its implications for momentum.\n   - Identify any divergences between the MACD and the price action.\n\n3. **Volume Analysis**:\n   - Highlight any significant changes in trading volume.\n   - Explain how volume supports or contradicts price movements.\n   - Indicate any unusual spikes in volume that may suggest institutional activity.\n\n4. **Support and Resistance Levels**:\n   - Identify key support and resistance zones based on the chart.\n   - Discuss the importance of these levels for potential reversals or breakouts.\n\n5. **Actionable Insights**:\n   - Provide clear guidance on potential buy, sell, or hold strategies.\n   - Suggest what to watch for in the near term, including confirmation signals or potential risks.\n\n6. **Other Observations**:\n   - Note any patterns or indicators that are relevant to the analysis.\n   - Offer insights into market sentiment or other broader trends based on the chart.\n\nBe clear, concise, and data-driven in your analysis. Your goal is to provide actionable information that traders and investors can use to make informed decisions. Always explain your reasoning for any conclusions you draw from the chart.\n",
        "inputType": "base64",
        "simplify": false,
        "options": {
          "detail": "auto"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3960,
        6340
      ],
      "id": "27e85c35-62d8-4938-9bdd-14203acad7c2",
      "name": "Technical Analysis"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3760,
        6340
      ],
      "id": "90ece191-1176-4e91-aae4-a764b4c02074",
      "name": "Download Chart"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.chart-img.com/v2/tradingview/advanced-chart/storage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "YOUR API KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"theme\": \"dark\",\n  \"interval\": \"1W\",\n  \"symbol\": \"NASDAQ:{{ $json.ticker }}\",\n  \"override\": {\n    \"showStudyLastValue\": false\n  },\n  \"studies\": [\n    {\n      \"name\": \"Volume\",\n      \"forceOverlay\": true\n    },\n    {\n      \"name\": \"MACD\",\n      \"override\": {\n        \"Signal.linewidth\": 2,\n        \"Signal.color\": \"rgb(255,65,129)\"\n      }\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3540,
        6340
      ],
      "id": "6e5e725f-cbbc-44ae-90d2-4d39451ecbc9",
      "name": "Get Chart URL"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cf5f7210-5b54-4f4a-abf7-87873be82df4",
              "name": "ticker",
              "value": "={{ $json.query }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3320,
        6340
      ],
      "id": "f68844cc-6047-4baa-b3f3-1a022b43d8ea",
      "name": "Set Ticker"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "YOUR CHAT ID",
        "file": "={{ $('Get Chart URL').item.json.url }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4160,
        6340
      ],
      "id": "ca7e58fd-ee44-49e9-b72f-d345550ddd4d",
      "name": "Send Chart"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        3540,
        5960
      ],
      "id": "afda0c26-ad5f-4b7a-b9a1-f8651909b87c",
      "name": "Anthropic Chat Model2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger2').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3700,
        5960
      ],
      "id": "7ce47efd-fe5d-4e97-a358-94698f259670",
      "name": "Window Buffer Memory1"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        3420,
        5740
      ],
      "id": "dc67b339-6f89-4cb7-8010-92e23efa276a",
      "name": "Telegram Trigger2",
      "webhookId": "dbf7f0b7-5cdd-45a3-8c91-39f0665aba76"
    },
    {
      "parameters": {
        "content": "## AI Agent\n",
        "height": 520,
        "width": 820,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3320,
        5620
      ],
      "typeVersion": 1,
      "id": "abdcb567-fe60-4542-aac5-83dc240079e1",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Get Chart & Technical Analysis Workflow",
        "height": 240,
        "width": 1580
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4860,
        7440
      ],
      "typeVersion": 1,
      "id": "3dfac565-cfe4-460b-81df-8855ee192e69",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fdf7e016-7082-4146-9038-454139023990",
              "name": "response",
              "value": "={{ $('Technical Analysis').item.json.choices[0].message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4360,
        6340
      ],
      "id": "204ed362-55eb-41ec-8711-f23ec3a538c2",
      "name": "response1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"api_key\": \"YOUR-API-KEY-HERE\",\n    \"query\": \"{{ $json.query.replace(/\"/g, '\\\\\"') }}\",\n    \"search_depth\": \"basic\",\n    \"include_answer\": true,\n    \"topic\": \"news\",\n    \"include_raw_content\": true,\n    \"max_results\": 3\n} ",
        "options": {}
      },
      "id": "9be74fc6-8339-40fe-a11b-ca0c600444d1",
      "name": "Search Internet",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1740,
        3920
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "139g8ULrzBTi7GSSCAm7lXR8mDdc6IiKr8XXV_eN01lo",
          "mode": "list",
          "cachedResultName": "Content Creation",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139g8ULrzBTi7GSSCAm7lXR8mDdc6IiKr8XXV_eN01lo/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139g8ULrzBTi7GSSCAm7lXR8mDdc6IiKr8XXV_eN01lo/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Campaign": "={{ $('Google Sheets Trigger').item.json.Campaign }}",
            "Blog": "={{ $('Blog Writer').item.json.output }}",
            "LinkedIn": "={{ $('LinkedIn').item.json.output }}",
            "X": "={{ $('X').item.json.output }}"
          },
          "matchingColumns": [
            "Campaign"
          ],
          "schema": [
            {
              "id": "Campaign",
              "displayName": "Campaign",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Content Subject",
              "displayName": "Content Subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Target Audience",
              "displayName": "Target Audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "LinkedIn",
              "displayName": "LinkedIn",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "X",
              "displayName": "X",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Blog",
              "displayName": "Blog",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "29aa6092-aa27-4480-a0b8-0c5e738b45d4",
      "name": "Update Campaign",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2340,
        4200
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "139g8ULrzBTi7GSSCAm7lXR8mDdc6IiKr8XXV_eN01lo",
          "mode": "list",
          "cachedResultName": "Content Creation",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139g8ULrzBTi7GSSCAm7lXR8mDdc6IiKr8XXV_eN01lo/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/139g8ULrzBTi7GSSCAm7lXR8mDdc6IiKr8XXV_eN01lo/edit#gid=0"
        },
        "event": "rowAdded",
        "options": {}
      },
      "id": "075247ab-6644-426f-a2bb-eccabe0f86e8",
      "name": "Google Sheets Trigger",
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        1420,
        3920
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b493a3c6-939a-4301-9257-055b80c28d7a",
              "name": "query",
              "value": "={{ $json['Content Subject'] }}",
              "type": "string"
            },
            {
              "id": "e2813669-08fd-4d0d-a215-b0634032330b",
              "name": "targetAudience",
              "value": "={{ $json['Target Audience'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "cd9a9ae6-e7e5-4cc6-a4ec-883c929f0e27",
      "name": "Set Search Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1580,
        3920
      ]
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=Article Content:\n{{ $('Aggregate1').item.json.data.toJsonString() }}\n\nTarget Audience:\n{{ $('Set Search Fields').item.json.targetAudience }}",
        "options": {
          "systemMessage": "# System Role\nYou are a skilled and creative blog writer, capable of crafting engaging, concise, and well-structured two-paragraph blog articles based on provided content.\n\n# Task Specification\nWrite a two-paragraph blog article using the provided content. The blog should be coherent, engaging, and informative, tailored to a general audience. Ensure the tone is professional yet approachable, and the structure flows logically from introduction to conclusion.\n\n# Specifics and Context\nThis task is essential for producing quick, high-quality blog articles that capture readers' attention while accurately conveying the intended message. By writing clear and engaging content, you help brands or individuals establish thought leadership and connect with their audience effectively.\n\n# Examples\n## Example 1\n**Input:**  \nContent: \"Remote work has grown 44% in the last five years. Benefits include flexibility and reduced commute times. Challenges include maintaining productivity and combating isolation.\"\n\n**Output:**  \nRemote work has become a transformative trend, with a 44% increase in adoption over the past five years. The appeal lies in its flexibility, allowing employees to tailor their schedules and eliminate time-consuming commutes. This shift has unlocked new possibilities for work-life balance and broadened the talent pool for businesses willing to embrace remote setups.\n\nHowever, remote work isn’t without its challenges. Employees often face difficulties in maintaining productivity outside a structured office environment and struggle with feelings of isolation. Addressing these concerns requires thoughtful solutions, such as virtual collaboration tools and strategies to foster connection, ensuring remote work remains both productive and fulfilling.\n\n## Example 2\n**Input:**  \nContent: \"The Mediterranean diet includes fruits, vegetables, whole grains, and healthy fats like olive oil. Studies show it reduces the risk of heart disease and supports brain health.\"\n\n**Output:**  \nThe Mediterranean diet has long been celebrated as one of the healthiest eating patterns in the world. Emphasizing fresh fruits, vegetables, whole grains, and heart-healthy fats like olive oil, this diet is as delicious as it is nutritious. Its flavorful diversity makes it easy to adopt and sustain, whether you’re enjoying a vibrant Greek salad or a wholesome bowl of minestrone.\n\nWhat sets the Mediterranean diet apart is its scientifically backed health benefits. Numerous studies highlight its ability to reduce the risk of heart disease and support cognitive health, making it a cornerstone for longevity and wellness. By prioritizing natural, unprocessed foods, this lifestyle offers a sustainable approach to eating well and living better.\n\n# Reminders\n- Maintain clarity and logical flow between paragraphs.\n- Ensure the tone is engaging yet professional.\n- Keep the blog concise and aligned with the provided content.\n"
        }
      },
      "id": "6e7b0aab-d7cf-4433-bcaf-c1ddd3da23a6",
      "name": "Blog Writer",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        2000,
        4200
      ]
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=Article Content:\n{{ $json.data.toJsonString() }}\n\nTarget Audience:\n{{ $('Set Search Fields').item.json.targetAudience }}",
        "options": {
          "systemMessage": "# System Role  \nYou are an expert LinkedIn content creator specializing in transforming incoming articles into highly engaging posts tailored to a specific target audience.  \n\n# Task Specification  \nUsing the provided article, craft a LinkedIn post that is:  \n1. Written in a concise, engaging tone optimized for readability on mobile.  \n2. Tailored specifically to the target audience’s interests, needs, and professional goals.  \n3. Plain text only, with frequent line breaks for clarity.  \n4. Incorporates 1-2 emojis to enhance personality and appeal.  \n5. Provides actionable value and includes a clear call to action.  \n6. Contains 3-5 relevant hashtags.  \n7. Outputs only the post text—nothing else.  \n\n# Specifics and Context  \nThe post should succinctly capture the core message of the article while resonating with the audience’s values. It must sound human and conversational, staying under 3,000 characters.  \n\n# Examples  \n## Example 1  \n**Input:** Article about productivity tips for managers.  \n**Output:**  \n🔥 Time to Supercharge Your Productivity!  \n\nManagers, are your days packed with back-to-back meetings and endless to-do lists? Here’s the secret to working smarter, not harder: [insight summary].  \n\n👉 Top tips to stay ahead:  \n1. Prioritize tasks using the Eisenhower Matrix.  \n2. Block time on your calendar for deep focus.  \n3. Delegate effectively to your team.  \n\nWhat strategies help you lead and manage your time effectively? Share your thoughts below!  \n\n#Leadership #TimeManagement #Productivity  \n\n# Reminders  \n- Ensure the content aligns with the target audience's interests and challenges.  \n- Always include 1-2 emojis and a call to action.  \n- Use plain text and only output the post content.  \n"
        }
      },
      "id": "88c35f31-ba74-47fc-afdc-c76ac04befdd",
      "name": "LinkedIn",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1360,
        4200
      ]
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=Article Content:\n{{ $('Aggregate1').item.json.data.toJsonString() }}\n\nTarget Audience:\n{{ $('Set Search Fields').item.json.targetAudience }}",
        "options": {
          "systemMessage": "=# System Role  \nYou are an expert Twitter content creator specializing in transforming articles into engaging, concise tweets tailored to a specific target audience.  \n\n# Task Specification  \nUsing the provided article, craft a tweet that is:  \n1. Short, concise, and optimized for Twitter’s character limit (280 characters).  \n2. Tailored to resonate with the target audience’s interests, needs, and goals.  \n3. Incorporates 1-2 emojis to enhance personality and appeal.  \n4. Offers value or insight and includes a clear call to action.  \n5. Contains 1-3 relevant hashtags.  \n6. Outputs only the tweet text—nothing else.  \n\n# Specifics and Context  \nThe tweet should distill the essence of the article into a single impactful message. It must grab attention, provide immediate value, and encourage engagement (e.g., likes, replies, or clicks).  \n\n# Examples  \n## Example 1  \n**Input:** Article about productivity tips for managers.  \n**Output:**  \n🔥 Overwhelmed by meetings and to-dos? Managers, here’s how to stay ahead:  \n- Use the Eisenhower Matrix.  \n- Block focus time.  \n- Delegate smarter.  \n\nWhat’s your top time-management hack? Let’s share! ⏰  \n\n#Leadership #Productivity  \n\n# Reminders  \n- Keep the tone approachable and engaging.  \n- Use emojis sparingly for emphasis.  \n- Ensure the tweet stays within 280 characters and is tailored to the audience.  \n- Only output the tweet text.  \n"
        }
      },
      "id": "075d090a-735e-4d5f-a548-1406399c75d6",
      "name": "X",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1680,
        4200
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "title, raw_content",
        "options": {}
      },
      "id": "762c34fb-0e2a-471d-bfa3-6ae6e3556a76",
      "name": "Aggregate1",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2060,
        3920
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "results",
        "options": {}
      },
      "id": "0f0feeac-164e-440c-bfbd-9a4e096c47cb",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1900,
        3920
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d8dd7052-2d0e-421e-9543-40c3f24e890e",
      "name": "OpenAI Chat Model9",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1700,
        4360
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "0ff0e387-25ed-44b2-a510-db0c28b3863c",
      "name": "OpenAI Chat Model10",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2020,
        4360
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d48a3649-5977-4069-b64e-afdec605c714",
      "name": "OpenAI Chat Model11",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1380,
        4360
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -2480,
        -120
      ],
      "id": "8ec45e6f-8593-4fb5-9d59-302a27da14ac",
      "name": "When chat message received",
      "webhookId": "9ffd410c-30e0-4d4c-a356-821528a7c246"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailRecipient\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "text",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -1920,
        100
      ],
      "id": "70c140a3-9944-4c4d-aeb7-880ea2820987",
      "name": "sendEmail",
      "webhookId": "fb1742fc-9eb4-42b8-9543-7e74eebdb962"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "",
          "cachedResultUrl": ""
        }
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        -2040,
        100
      ],
      "id": "def55960-9381-4e01-b6fa-5a682b8cf1cc",
      "name": "contactDatabase"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fda8a59e-fa5e-44f3-b0c7-9943676c870a",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1840,
        -120
      ],
      "id": "c0d58a3c-fd38-4e64-a858-fb486c1e81be",
      "name": "Output"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent designed to assist users by sending emails based on their queries. The agent uses the \"sendEmail\" tool to format and deliver messages effectively and the \"contactDatabase\" tool to retrieve contact information such as email addresses.  \n\n## Context  \n- The agent receives messages from users and identifies when an email needs to be sent.  \n- If the recipient's email address is not provided, the agent retrieves it using the \"contactDatabase\" tool.  \n- The agent should be friendly, helpful, and concise in its communication.  \n- The email content must reflect professionalism and clarity.  \n\n## Instructions  \n1. Receive the user message via the chat input.  \n2. Analyze the message to identify the email recipient, subject, and body.  \n3. If the recipient’s email address is missing:  \n   - Use the \"contactDatabase\" tool to look up the contact details.  \n   - Confirm with the user if multiple contacts are found with similar names.  \n4. Format the email appropriately:  \n   - Include a greeting and closing statement.  \n   - Add any required attachments (if specified).  \n5. Send the formatted email using the \"sendEmail\" tool.  \n6. Provide the user with a confirmation that the email has been sent successfully.  \n\n## Tools  \n- **OpenAI Chat Model**: Processes user inputs and generates responses.  \n- **Window Buffer Memory**: Retains the chat history for context.  \n- **sendEmail Tool**: Handles sending email messages based on the input fields.  \n- **contactDatabase Tool**: Retrieves contact data, such as email addresses, based on the recipient's name.  \n\n## Examples  \n- **Input**: \"Please send an email to John about the meeting tomorrow at 3 PM.\"  \n  - **Action**: If \"John\" is not associated with an email in the request, query \"contactDatabase\" for John's email address.  \n  - **Output**: \"Email sent to John (john@example.com) with the subject 'Meeting Reminder' and the body: 'Hi John, just a reminder that our meeting is scheduled for tomorrow at 3 PM. Let me know if you need anything else.'”  \n\n- **Input**: \"Send an update to Sarah with the latest report attached.\"  \n  - **Action**: Retrieve Sarah’s email address if it is not included. Attach the latest report.  \n  - **Output**: \"Email sent to Sarah (sarah@example.com) with the subject 'Latest Report' and the report attached.\"  \n\n## SOP (Standard Operating Procedure)  \n1. **Identify User Intent**: Ensure the message is a request to send an email.  \n2. **Extract Key Details**: Identify recipient, subject, message content, and any additional instructions (e.g., attachments).  \n3. **Check Contact Information**:  \n   - If the email address is not provided, query \"contactDatabase\" for the recipient’s contact details.  \n   - Handle multiple results by confirming with the user which contact to use.  \n4. **Generate Email Content**:  \n   - Start with \"Hi [Recipient Name],\"  \n   - Add the message body and a friendly closing.  \n5. **Send Email**:  \n   - Trigger the \"sendEmail\" tool with the prepared fields.  \n   - Handle any errors and notify the user if the email fails to send.  \n6. **Confirm with the User**: Provide feedback that the email has been successfully sent.  \n\n## Final Notes  \n- If no contact is found, ask the user to provide the recipient's email manually.  \n- Always confirm the correct contact if there are multiple entries with similar names.  \n- Maintain context using memory for longer conversations to avoid asking redundant questions. \n---  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -2220,
        -120
      ],
      "id": "b13dc36f-95eb-4f93-97e1-3875fc6dde3f",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -2320,
        100
      ],
      "id": "25a53065-9e5e-42cf-b011-20485c885475",
      "name": "OpenAI Chat Model12"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -2180,
        100
      ],
      "id": "cf19c410-f7bb-4972-8b71-6332d733fdbf",
      "name": "Window Buffer Memory2"
    },
    {
      "parameters": {
        "name": "nvidia",
        "description": "retrieves data about nvidia earnings report"
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        3780,
        3140
      ],
      "id": "7976d3dd-2eb7-4a17-a4ba-11f3a2869d02",
      "name": "nvidia"
    },
    {
      "parameters": {
        "name": "nvidia",
        "description": "retrieves data about nvidia earnings report"
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        3740,
        3440
      ],
      "id": "63d15b73-5112-4a68-9ecb-83b18af20092",
      "name": "nvidia1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        4060,
        3600
      ],
      "id": "9deebd2b-7b1b-4c53-b616-a23cb71b4613",
      "name": "Embeddings OpenAI1"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        3380,
        3620
      ],
      "id": "4a7d582b-17a3-4199-88c0-d72f0fa2ac21",
      "name": "GPT-4o"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        3360,
        3280
      ],
      "id": "31f41951-418e-4f88-abed-1fc6b405cfbe",
      "name": "Claude 3.5 Sonnet"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for retrieving and summarizing NVIDIA's financial and earnings information.  \n\n## Context  \n- The agent uses the \"nvidia\" tool to access up-to-date data on NVIDIA's financials, including revenue, earnings, and market performance.  \n- Responses should be concise, accurate, and focused on the requested metrics or insights.  \n\n## Instructions  \n1. Identify the specific financial metric or information requested by the user.  \n2. Query the \"nvidia\" tool for the relevant data.  \n3. Summarize the findings in a clear and professional manner.  \n\n## Tools  \n- NVIDIA financials and earnings tool (\"nvidia\").  \n\n## Examples  \n- Input: \"Provide NVIDIA's Q4 earnings report summary.\"  \n- Output: \"NVIDIA's Q4 earnings were $2.5 billion, with a 12% year-over-year growth. Revenue was $8.3 billion.\"  \n\n- Input: \"What was NVIDIA's revenue in the last fiscal year?\"  \n- Output: \"NVIDIA's revenue for the last fiscal year was $33 billion, marking a 20% increase from the previous year.\"  \n\n## SOP (Standard Operating Procedure)  \n1. Parse the user's query to determine the specific financial details required.  \n2. Use the \"nvidia\" tool to retrieve the latest data.  \n3. Cross-check and verify the data for accuracy.  \n4. Provide a concise summary in response to the user's query.  \n\n## Final Notes  \n- Always ensure the data is current and relevant to the query.  \n- Avoid speculation; report only factual information retrieved from the \"nvidia\" tool.  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3360,
        3420
      ],
      "id": "7a5b22af-1528-4662-8258-ae3755733a37",
      "name": "GPT-4o Agent"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for retrieving and summarizing NVIDIA's financial and earnings information.  \n\n## Context  \n- The agent uses the \"nvidia\" tool to access up-to-date data on NVIDIA's financials, including revenue, earnings, and market performance.  \n- Responses should be concise, accurate, and focused on the requested metrics or insights.  \n\n## Instructions  \n1. Identify the specific financial metric or information requested by the user.  \n2. Query the \"nvidia\" tool for the relevant data.  \n3. Summarize the findings in a clear and professional manner.  \n\n## Tools  \n- NVIDIA financials and earnings tool (\"nvidia\").  \n\n## Examples  \n- Input: \"Provide NVIDIA's Q4 earnings report summary.\"  \n- Output: \"NVIDIA's Q4 earnings were $2.5 billion, with a 12% year-over-year growth. Revenue was $8.3 billion.\"  \n\n- Input: \"What was NVIDIA's revenue in the last fiscal year?\"  \n- Output: \"NVIDIA's revenue for the last fiscal year was $33 billion, marking a 20% increase from the previous year.\"  \n\n## SOP (Standard Operating Procedure)  \n1. Parse the user's query to determine the specific financial details required.  \n2. Use the \"nvidia\" tool to retrieve the latest data.  \n3. Cross-check and verify the data for accuracy.  \n4. Provide a concise summary in response to the user's query.  \n\n## Final Notes  \n- Always ensure the data is current and relevant to the query.  \n- Avoid speculation; report only factual information retrieved from the \"nvidia\" tool.  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3360,
        3080
      ],
      "id": "51ea778d-c17c-4abc-a66c-9e51180976f4",
      "name": "Claude 3.5 Sonnet Agent"
    },
    {
      "parameters": {
        "name": "nvidia",
        "description": "retrieves data about nvidia earnings report"
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        3740,
        3780
      ],
      "id": "0e159752-b71d-4513-8e4c-4e498c22aa24",
      "name": "nvidia2"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for retrieving and summarizing NVIDIA's financial and earnings information.  \n\n## Context  \n- The agent uses the \"nvidia\" tool to access up-to-date data on NVIDIA's financials, including revenue, earnings, and market performance.  \n- Responses should be concise, accurate, and focused on the requested metrics or insights.  \n\n## Instructions  \n1. Identify the specific financial metric or information requested by the user.  \n2. Query the \"nvidia\" tool for the relevant data.  \n3. Summarize the findings in a clear and professional manner.  \n\n## Tools  \n- NVIDIA financials and earnings tool (\"nvidia\").  \n\n## Examples  \n- Input: \"Provide NVIDIA's Q4 earnings report summary.\"  \n- Output: \"NVIDIA's Q4 earnings were $2.5 billion, with a 12% year-over-year growth. Revenue was $8.3 billion.\"  \n\n- Input: \"What was NVIDIA's revenue in the last fiscal year?\"  \n- Output: \"NVIDIA's revenue for the last fiscal year was $33 billion, marking a 20% increase from the previous year.\"  \n\n## SOP (Standard Operating Procedure)  \n1. Parse the user's query to determine the specific financial details required.  \n2. Use the \"nvidia\" tool to retrieve the latest data.  \n3. Cross-check and verify the data for accuracy.  \n4. Provide a concise summary in response to the user's query.  \n\n## Final Notes  \n- Always ensure the data is current and relevant to the query.  \n- Avoid speculation; report only factual information retrieved from the \"nvidia\" tool.  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3340,
        3760
      ],
      "id": "226f846b-c28b-4eba-be1d-448a0e5d1cd9",
      "name": "GPT-4o Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-exp",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3340,
        3960
      ],
      "id": "b612f61a-724c-44c9-b84a-cc4083ac697a",
      "name": "Gemini Flash 2.0"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-exp",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3800,
        3960
      ],
      "id": "651ef86a-030f-4eab-a453-d90a74304b33",
      "name": "Gemini Flash 2.0_"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        3760,
        3620
      ],
      "id": "e0379eae-e43a-4a81-95fc-14d3ed47d209",
      "name": "GPT-4o_"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        3800,
        3260
      ],
      "id": "a79db1f5-d42c-4d81-8a40-8c20ef3b668a",
      "name": "Claude 3.5 Sonnet_"
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "sample",
          "mode": "list",
          "cachedResultName": "sample"
        },
        "options": {
          "pineconeNamespace": "nvidia"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        4040,
        3100
      ],
      "id": "be594377-4b90-4c92-9678-3bf32f1a50b4",
      "name": "Pinecone Vector Store3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        4060,
        3280
      ],
      "id": "febcac18-7d12-4ca6-b731-c7ba4319f69e",
      "name": "Embeddings OpenAI3"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {},
        "options": {}
      },
      "id": "c753419c-679b-4383-9da7-11029b70a4e7",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        1120,
        5320
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "48bb2e0c-15a8-4f10-bca7-4d1d67ac7296",
              "name": "emailBody",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "06a6a58d-58f8-42c7-a4d8-988d52565ec2",
              "name": "threadID",
              "value": "={{ $json.threadId }}",
              "type": "string"
            },
            {
              "id": "e9624de8-55ce-4ceb-a47b-26ce1028f57b",
              "name": "from",
              "value": "={{ $json.to.value[0].address }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "bc9c028d-52f0-4ddd-9272-070be8854bb1",
      "name": "Set Content",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1040,
        5100
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Prompt:\nAnalyze the content of the following email and determine whether it is related to customer support. If the email pertains to any of the following topics, mark customerSupport as true; otherwise, mark it as false.\n\nCustomer Support Topics Include:\n\nQuestions about order status, tracking, or changes\nIssues with damaged or defective products\nRefund or return requests\nSubscription cancellations or adjustments\nTechnical issues with products, website, or app\nPayment or billing inquiries\nRequests for speaking with a support representative\n\nOutput:\nProvide the result in JSON format with a field named \"customerSupport\" set to true or false.",
              "role": "system"
            },
            {
              "content": "=Here is the incoming email: {{ $json.emailBody }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "id": "b3d044b5-c793-471d-b407-cd072b1cb78a",
      "name": "Customer Support Eval",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        1240,
        5100
      ]
    },
    {
      "parameters": {
        "name": "customerSupportDocs",
        "description": "Retrieves information about our customer support policies and FAQs"
      },
      "id": "8eed62ad-7d18-42f2-9e33-04a31684e8e1",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        2120,
        5240
      ]
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $fromAI(\"subject\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "threadId": "={{ $('Set Content').item.json.threadID }}",
          "sendTo": "={{ $('Set Content').item.json.from }}"
        }
      },
      "id": "1dfbb850-1d9a-43a3-aa49-20e02d80dcfa",
      "name": "createDraft",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        2480,
        5200
      ],
      "webhookId": "aa94fec5-4706-4d8d-89e0-ba0ebe17452e"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Set Content').item.json.emailBody }}",
        "options": {
          "systemMessage": "=# System Role\nYou are a highly skilled and empathetic customer support agent specializing in drafting professional and helpful responses to incoming customer emails.\n\n# Task Specification\n1. Take an incoming customer support email.\n2. Use the **\"customerSupportDocs\"** tool to look up relevant policies or FAQs to ensure accurate and policy-compliant responses.\n3. Create a draft response using the **\"createDraft\"** tool.\n4. After drafting the email, provide a concise summary of the email content.\n\nEnsure the response:\n- Directly addresses the customer's query.\n- Maintains a polite and professional tone.\n- Ends with the sign-off:  \n  **\"Kelly, Customer Support ABC Corp.\"**\n\n# Specifics and Context\n- You must use the **\"customerSupportDocs\"** tool before drafting to ensure the response aligns with company policies and FAQs.\n- The **\"createDraft\"** tool must be used to finalize and prepare the draft for sending.\n- The summary should briefly explain the issue addressed and the key points or resolution provided in the response.\n\n# Examples\n## Example 1\n**Incoming Email:**  \n\"I ordered a product a week ago, but it still hasn't shipped. When will it arrive?\"\n\n**customerSupportDocs Search Query:**  \n\"shipping timelines\"\n\n**Relevant Info Found:**  \nStandard shipping takes 7–10 business days. Delays may occur during high-demand periods.\n\n**Draft Response (via createDraft):**  \nDear [Customer's Name],  \n\nThank you for reaching out regarding your order. Standard shipping typically takes 7–10 business days. However, during high-demand periods, there may be slight delays.  \n\nI’ve checked your order, and it’s currently being prepared for shipment. You should receive a tracking number shortly. If you have any further questions, feel free to let me know.  \n\nBest regards,  \nKelly, Customer Support ABC Corp  \n\n**Summary:**  \nDrafted a response to inform the customer about shipping timelines (7–10 business days) and noted that their order is being prepared for shipment. Included reassurance and an invitation for further inquiries.\n\n---\n\n## Example 2\n**Incoming Email:**  \n\"I tried to cancel my subscription but was still charged this month. Can I get a refund?\"\n\n**customerSupportDocs Search Query:**  \n\"subscription cancellation policy\"\n\n**Relevant Info Found:**  \nCancellations must be made 48 hours before the next billing cycle to avoid charges.\n\n**Draft Response (via createDraft):**  \nDear [Customer's Name],  \n\nThank you for contacting us about your subscription charge. Our records show the cancellation was processed after the billing cycle had begun. To avoid future charges, cancellations must be made at least 48 hours prior to the next billing cycle.  \n\nAs a courtesy, I’ve initiated a refund for this month’s charge. Please allow 3–5 business days for the refund to appear on your statement.  \n\nIf you have any other questions, feel free to reach out.  \n\nBest regards,  \nKelly, Customer Support ABC Corp  \n\n**Summary:**  \nDrafted a response explaining the subscription cancellation policy (48-hour notice) and initiated a one-time refund as a courtesy. Provided reassurance and invited further questions.\n\n# Reminders\n- Always use **\"customerSupportDocs\"** to ensure responses align with company policies and FAQs.\n- Use the **\"createDraft\"** tool to finalize the email draft.\n- Summarize the draft concisely, covering the issue addressed and the resolution or key points provided.\n- Maintain a polite, professional, and empathetic tone.\n- Always sign off as:  \n  **\"Kelly, Customer Support ABC Corp.\"**\n"
        }
      },
      "id": "fc1fcfae-3668-4754-a4ce-562ad30a63ed",
      "name": "Customer Support Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        2260,
        5060
      ]
    },
    {
      "parameters": {
        "text": "=You received an email at {{ $now.format('hh:mm') }} saying:\n\n{{ $('Set Content').item.json.emailBody }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "e0cd50d0-d164-4a02-bf12-33183f2df9a9",
      "name": "Response Not Customer Support",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1540,
        5520
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.content.customerSupport }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Customer Support"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3461ccc2-8323-4c31-b964-618240c03795",
                    "leftValue": "={{ $json.message.content.customerSupport }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Not Customer Support"
            }
          ]
        },
        "options": {}
      },
      "id": "424c16dc-d8a1-40de-8444-d08e1ec3305f",
      "name": "Customer Support?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1620,
        5080
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "52c2c867-ccd9-4c28-9c8d-52d49b6ca791",
      "name": "OpenAI Chat Model13",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1960,
        5180
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "15926f92-0fbe-4cbc-93e5-4149215282b2",
      "name": "OpenAI Chat Model14",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2540,
        5520
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c736f8a6-def9-4cec-8381-0b21f7386ebc",
      "name": "Embeddings OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        1800,
        5640
      ]
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "sample",
          "mode": "list",
          "cachedResultName": "sample"
        },
        "options": {
          "pineconeNamespace": "customerSupport"
        }
      },
      "id": "7eae2fa1-aebb-4e25-b929-fc2a6d515713",
      "name": "Pinecone Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        1880,
        5440
      ]
    },
    {
      "parameters": {
        "chatId": "=",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "dce56a47-484e-497a-b22e-ae724d668696",
      "name": "Response3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2660,
        5060
      ]
    },
    {
      "parameters": {},
      "id": "74b0d9a3-952e-4ce1-b425-7bfbb12ece1d",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1620,
        5320
      ]
    },
    {
      "parameters": {
        "dataType": "binary",
        "options": {}
      },
      "id": "a0f9eb37-ca65-4598-881f-a6584b8c8a51",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        -1080,
        5540
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a7857b07-fa87-4cc4-ae1d-c60d1063611d",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -1080,
        5760
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "9a710e7c-a12b-41f1-9ee0-5707a2990c65",
      "name": "Embeddings OpenAI4",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        -1240,
        5540
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1Q50sNO8BM5P5epkqGDOSNWTKbxBOYzIpCh_rPxI8hu0",
          "mode": "list",
          "cachedResultName": "Customer Support Policies and FAQs",
          "cachedResultUrl": "https://docs.google.com/document/d/1Q50sNO8BM5P5epkqGDOSNWTKbxBOYzIpCh_rPxI8hu0/edit?usp=drivesdk"
        },
        "options": {}
      },
      "id": "e4a45d2d-6b75-4a60-891b-b829f8e2467b",
      "name": "Download File1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1400,
        5320
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "sample",
          "mode": "list",
          "cachedResultName": "sample"
        },
        "options": {
          "pineconeNamespace": "customerSupport"
        }
      },
      "id": "d293b71b-411e-4f70-a562-c64bc1f7157c",
      "name": "Pinecone Vector Store2",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        -1180,
        5320
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "fcd63cc2-408d-416b-97cf-bd3a30e7890a",
      "name": "Summarize1",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        -520,
        2500
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "688b9a01-4392-41a5-980a-20a2dfaa0983",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -920,
        2160
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "id": "ee0a3f93-b0d4-4b06-b13e-739a3750b8c7",
      "name": "Extract from Excel",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -920,
        2500
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $('File Updated').item.json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $('File Updated').item.json.mimeType }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f89d06f6-cc11-4b35-85c4-22c644f019ae",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2280,
        3320
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $('Set File ID').item.json.file_id }}*"
      },
      "id": "29f720fa-0b6d-4766-ac7a-ca3e6bc449f7",
      "name": "Delete Old Doc Rows",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1900,
        3320
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://www.googleapis.com/drive/v3/files/{{ $('Set File ID1').item.json.file_id }}/copy",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $('Set File ID1').item.json.name }}"
            },
            {
              "name": "mimeType",
              "value": "application/vnd.google-apps.document"
            }
          ]
        },
        "options": {}
      },
      "id": "a4f05841-a168-4303-b613-cee9a65cf0de",
      "name": "Convert to Google Doc1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -920,
        2680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "928b5cae-77cd-48a2-81ef-2f76dc441b0a",
              "leftValue": "={{ $('File Updated').item.json.mimeType }}",
              "rightValue": "application/vnd.google-apps.document",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6368b5ad-32b0-491d-a27d-5cc3ad5c2a11",
              "leftValue": "={{ ((Date.now() - Date.parse($('File Updated').item.json.createdTime)) / 1000) }}",
              "rightValue": 60,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2120,
        3320
      ],
      "id": "25cd8c4c-1bda-4d2b-9af4-6e0b0cee19dc",
      "name": "If",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "deleteFile",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID1').item.json.file_id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -720,
        2680
      ],
      "id": "ec460b70-72af-4d83-abda-08c66ce21bf7",
      "name": "Delete File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $('File Created').item.json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $('File Created').item.json.mimeType }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "8b4006c8-ee80-496b-91e3-2ae5ee212e67",
      "name": "Set File ID1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2220,
        2460
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "b255d17a-d9f6-4133-acdd-12b2c4f535ff",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        0,
        3420
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "ff9361dc-c716-471b-8020-b99e10bca6f4",
      "name": "Extract PDF Text1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -400,
        3080
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "id": "be96448b-fb2c-40d5-992d-b0ae3d6d1bb4",
      "name": "Extract from Excel1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -400,
        3420
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://www.googleapis.com/drive/v3/files/{{ $('Set File ID').item.json.file_id }}/copy",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $('Set File ID').item.json.name }}"
            },
            {
              "name": "mimeType",
              "value": "application/vnd.google-apps.document"
            }
          ]
        },
        "options": {}
      },
      "id": "be8edb4a-06e4-44c5-a5f5-8315921a6b30",
      "name": "Convert to Google Doc2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -400,
        3620
      ]
    },
    {
      "parameters": {
        "operation": "deleteFile",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -200,
        3620
      ],
      "id": "fb105674-1b61-491a-83a5-92e81d5d238f",
      "name": "Delete File1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2060,
        2460
      ],
      "id": "9ad7aa54-4245-4269-8235-35210311e1c4",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID1').item.json.file_id }}"
              },
              {
                "name": "=version",
                "value": "v1"
              },
              {
                "name": "=creator",
                "value": "={{ $('File Created').item.json.owners[0].displayName }}"
              },
              {
                "name": "=created_at",
                "value": "={{ $('File Created').item.json.createdTime }}"
              },
              {
                "name": "last_modified",
                "value": "={{ $('File Created').item.json.modifiedTime }}"
              },
              {
                "name": "folder_path",
                "value": "projects"
              },
              {
                "name": "file_name",
                "value": "={{ $('File Created').item.json.name }}"
              },
              {
                "name": "file_extension",
                "value": "={{ $('File Created').item.json.mimeType }}"
              }
            ]
          }
        }
      },
      "id": "6b64e13a-9b6b-4692-99cc-486eeae95bdb",
      "name": "Enhanced Default Data Loader1",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        -140,
        2380
      ]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID').item.json.file_id }}"
              },
              {
                "name": "=version",
                "value": "={{ $('Set Version').item.json.message.content.version }}"
              },
              {
                "name": "=creator",
                "value": "={{ $('File Updated').item.json.owners[0].displayName }}"
              },
              {
                "name": "=created_at",
                "value": "={{ $('File Updated').item.json.createdTime }}"
              },
              {
                "name": "=last_modified",
                "value": "={{ $('File Updated').item.json.modifiedTime }}"
              },
              {
                "name": "=folder_path",
                "value": "projects"
              },
              {
                "name": "=file_name",
                "value": "={{ $('File Updated').item.json.name }}"
              },
              {
                "name": "=file_extension",
                "value": "={{ $('File Updated').item.json.mimeType }}"
              }
            ]
          }
        }
      },
      "id": "725dfa29-2d71-4fd7-af2a-bd1f4d2da70b",
      "name": "Enhanced Default Data Loader2",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        540,
        3300
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1120,
        3320
      ],
      "id": "3b1b3b25-eda0-4271-aaaa-7a09473fe73f",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E",
          "mode": "list",
          "cachedResultName": "Projects",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "6832a849-17ca-4881-90e5-4b284e906119",
      "name": "File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -2420,
        2460
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E",
          "mode": "list",
          "cachedResultName": "Projects",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "cc859874-2a0e-4e64-8d4f-6e6e423d3052",
      "name": "File Updated",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -2460,
        3320
      ],
      "disabled": true
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "id"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "702a132e-e5c5-457f-9b12-a22c0dfdc97f",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        280,
        3080
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "08c9667b-d34c-4eb8-bdf3-68e912150e51",
      "name": "Extract from Text File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -920,
        2320
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "523b3f1c-b64f-421a-9392-428b8378c304",
      "name": "Extract from Text File1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -400,
        3240
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "d378b0f4-a1e1-4d52-be65-a4fe06f6418e",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -1740,
        3320
      ]
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "id": "ba99cd50-834f-4121-ac3c-df35ecb9598f",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.1,
      "position": [
        -1920,
        1440
      ]
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "d20725c4-b45a-4d64-8a23-13a5b7cd0f77",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        -1900,
        1600
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "743d964c-44fb-4c19-a959-a4a8e4d330b7",
      "name": "New RAG Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -1960,
        1220
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "fc193b06-363b-4699-a97d-e5a850138b0e",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text File"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Excel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7ddfa924-1c26-4ee3-9890-5c9d2b96717a",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Windows Doc(1)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f53caf8b-7a8f-4d1e-98f4-deaf0e0171f0",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/msword",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Windows Doc(2)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "cd9ca627-d00d-4c30-903a-41f603c8e36f",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/vnd.ms-word",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Windows Doc(3)"
            }
          ]
        },
        "options": {
          "fallbackOutput": 2
        }
      },
      "id": "d2c14ea4-d51f-4e78-962f-1873428153ec",
      "name": "Switch2",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -1500,
        2380
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "Your goal is to take the incoming version number and add 1 to it. \n\n[Examples]\nInput: v1\nOutput: v2\n\nInput: v2\nOutput: v3\n\nInput: v4\nOutput: v5 \n\nThe output field should always be called \"version\"",
              "role": "system"
            },
            {
              "content": "=incoming version number: {{ $json.metadata.version }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "id": "922e3b95-6ae7-4026-ae06-16f7fdc5228c",
      "name": "Set Version",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        -1520,
        3320
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "=documents",
          "mode": "id"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "073b8283-435c-4dbc-a508-7866225b38b9",
      "name": "Insert into Supabase Vectorstore1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        -320,
        2180
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "41ea7e67-3ab2-4c0d-ae2f-19fdea4160cd",
      "name": "Aggregate2",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -720,
        2500
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "c24216f9-2e0a-43f4-a34b-ec5b6da71395",
      "name": "Download File2",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -960,
        3480
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID1').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "515df307-f419-4b41-afa5-25399bf79bc0",
      "name": "Download File3",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1900,
        2620
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "7a4dc27e-9da8-45d9-a916-70a272a3b1fa",
      "name": "Aggregate3",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -200,
        3420
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        -300,
        2480
      ],
      "id": "9c513c33-a012-433f-90a8-7b2af96e3d37",
      "name": "Embeddings OpenAI5"
    },
    {
      "parameters": {
        "chunkSize": 2000,
        "chunkOverlap": 200,
        "options": {
          "splitCode": "markdown"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -60,
        2540
      ],
      "id": "25ecb2f0-564e-41a0-ba94-a654cbdce252",
      "name": "Recursive Character Text Splitter2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        320,
        3400
      ],
      "id": "c806257b-4c7e-4bcb-8a41-ca230ce03617",
      "name": "Embeddings OpenAI6"
    },
    {
      "parameters": {
        "content": "# Watch Trigger (Drive) - Files Created\n## Files created in a specific folder -> Check file type and do conversion if necessary -> Extract the text -> Add to Vector Store\nDrive/Backoffice/Backoffice_Contracts",
        "height": 740,
        "width": 2660,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2500,
        2100
      ],
      "typeVersion": 1,
      "id": "d02c1f8f-a2f3-4bb5-9a0e-32a1e52e41bc",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "# Watch Trigger (Drive) - Files Updated\n## Files updated in a specific folder -> Check file type and do conversion if necessary -> Extract the text -> Add to Vector Store\nDrive/Backoffice/Backoffice_Contracts",
        "height": 888.3491772897637,
        "width": 3306.7699150920453,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2460,
        2920
      ],
      "typeVersion": 1,
      "id": "2db688bc-21c0-4a6d-962e-cf3634ecfe3e",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "fc193b06-363b-4699-a97d-e5a850138b0e",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text File"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Excel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7ddfa924-1c26-4ee3-9890-5c9d2b96717a",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Windows Doc(1)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f53caf8b-7a8f-4d1e-98f4-deaf0e0171f0",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/msword",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Windows Doc(2)"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "cd9ca627-d00d-4c30-903a-41f603c8e36f",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.ms-word",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Windows Doc(3)"
            }
          ]
        },
        "options": {
          "fallbackOutput": 2
        }
      },
      "id": "bccff0b9-af8a-4cde-8f89-8fec8ec3fde4",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -700,
        3300
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "968dc3b8-bd10-4fe3-a1c3-ffd7d895732d",
      "name": "OpenAI Chat Model15",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -2080,
        1440
      ]
    },
    {
      "parameters": {
        "name": "database",
        "description": "retrieves data about projects"
      },
      "id": "1e4bacbe-8e10-4d7a-acc7-5355a13ed080",
      "name": "Vector Store Tool1",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        -1760,
        1440
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "372adbfd-e635-415d-92ce-a7d151a3a54c",
      "name": "OpenAI Chat Model16",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -1620,
        1600
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c066eb71-b06f-4ddb-ac14-32302939877d",
      "name": "Embeddings OpenAI7",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        -1900,
        1740
      ]
    },
    {
      "parameters": {
        "content": "# RAG AI Agent\n",
        "height": 847.7499999999999,
        "width": 1262.1803336071664
      },
      "id": "df0dd018-0293-40e9-a5a2-d5b32fb7925b",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2480,
        1060
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": "={{ $fromAI(\"limit\") }}",
        "simple": false,
        "filters": {
          "sender": "={{ $fromAI(\"senderEmail\") }}"
        },
        "options": {}
      },
      "id": "38206c4b-e200-4de6-8245-c88e876a0361",
      "name": "Get Messages",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -1320,
        4540
      ],
      "webhookId": "298bfb23-109f-4b75-bd46-a4e72f2a8854"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3962d1e9-d984-49d3-9c6d-2a847de8f120",
      "name": "OpenAI Chat Model17",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -1660,
        4540
      ]
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\", \"the email address we are sending to\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "text",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false,
          "senderName": "Nate"
        }
      },
      "id": "1732c2a6-8635-4513-9fa1-26abed086d39",
      "name": "Send Email1",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -1480,
        4540
      ],
      "webhookId": "68f9e20c-a83c-4cc1-952e-467d6d8476ee"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "94af4a68-e0d7-497b-9186-63769d408b26",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "7f5cfcbd-f66f-4897-be82-8f453c928ec2",
      "name": "Response4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1100,
        4300
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=# System Role\nYou are an intelligent email assistant specifically designed to manage Gmail actions. Your primary role is to assist in composing and replying to emails, ensuring all emails are signed off professionally and consistently from \"Nate\" without using placeholders.\n\n# Task Specification\nYour task is to finalize and sign off all emails with \"Nate\" as the sender. Ensure the body of the email is clear, professional, and without placeholders such as [name], [company], or [placeholder text]. Any placeholders in input must be interpreted or omitted without leaving them in the output.\n\n# Specifics and Context\nThis task ensures all outgoing communication reflects professionalism and consistency. Signing off emails correctly as \"Nate\" avoids confusion and builds trust with recipients. By removing placeholders and finalizing content, you enhance communication effectiveness.\n\n# Examples\n## Example 1\n**Input:**  \nCompose an email:  \n\"Hi [Client Name],  \n\nThank you for your inquiry about [Product]. We’d be happy to discuss further. Please let us know your availability for a call next week.  \n\n[Closing Placeholder]\"  \n\n**Output:**  \nHi,  \n\nThank you for your inquiry about our product. We’d be happy to discuss further. Please let us know your availability for a call next week.  \n\nBest regards,  \nNate  \n\n---\n\n## Example 2\n**Input:**  \nReply to an email:  \n\"Hi Nate,  \n\nCan we confirm a meeting at [Time] on [Day]?  \n\nThanks,  \nJohn\"  \n\n**Output:**  \nHi John,  \n\nThank you for reaching out. Yes, I can confirm the meeting at your suggested time. Please let me know if there are any changes.  \n\nBest regards,  \nNate  \n\n# Reminders\n- Always remove placeholders from email drafts. Replace with suitable text or omit if no information is available.  \n- Sign off every email as \"Nate\" using a professional closing (e.g., \"Best regards,\" or \"Thanks,\").  \n- Ensure all language is clear, polished, and error-free.  \n"
        }
      },
      "id": "6416834e-cd41-4562-92e0-63cdde0d56ec",
      "name": "Email Agent2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -1520,
        4280
      ]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/customsearch/v1?key=YOUR_API_KEY&cx=ENGINE_ID&q=CEO+real+estate+Chicago&num=10&start={{ $json.start }}\n",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
            }
          ]
        },
        "options": {}
      },
      "id": "982f30fa-bd31-4e01-b6cb-91efb9e1a32d",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -760,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "let start = 0;  // Initial page\nconst limit = 100;  // Limit to fetch 500 profiles (adjust as needed)\nconst batchSize = 10;  // Google Search returns 100 results per page\nconst output = [];\n\n// Loop through pages by increments of 100\nwhile (start < limit) {\n  output.push({ json: { start: start } });\n  start += batchSize;  // Increment by 100 for each page\n}\n\nreturn output;\n"
      },
      "id": "2dd7e4ef-7ff0-4544-a471-2f9686748d9e",
      "name": "Pagination",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        -100
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the items array from the response\nconst items = $json[\"items\"];  // Access the items array directly from the response\n\n// Create an empty array to store the extracted URLs\nconst output = [];\n\nif (items && items.length > 0) {\n  // Loop over each item in the array and extract the 'link'\n  for (const item of items) {\n    if (item.link) {\n      // Push each extracted URL as a separate item in the output\n      output.push({\n        json: {\n          url: item.link,\n        }\n      });\n    }\n  }\n}\n\nreturn output;  // Return the array of URL items\n"
      },
      "id": "605c3cc5-0205-4917-a62e-720b8f5940ba",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        -80
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1_0bfvmyLdhc-j8QhCDDRVZQZvk5TNg7TYoUsvyh9MvY",
          "mode": "list",
          "cachedResultName": "Profiles Demo",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_0bfvmyLdhc-j8QhCDDRVZQZvk5TNg7TYoUsvyh9MvY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_0bfvmyLdhc-j8QhCDDRVZQZvk5TNg7TYoUsvyh9MvY/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "9f6daea2-b2f0-4d49-b6de-38001ac19787",
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -380,
        -80
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e3cba622-cc5c-4c16-bcc2-84a1b75fd512",
      "name": "Loop Over Items2",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -980,
        -100
      ]
    },
    {
      "parameters": {
        "model": "=deepseek-reasoner",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -3680,
        2500
      ],
      "id": "68a8e956-ffdd-48be-aa27-67d143dd462d",
      "name": "DeepSeek R1 Model"
    },
    {
      "parameters": {
        "model": "=deepseek/deepseek-r1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -4140,
        2240
      ],
      "id": "b1baa5c8-700c-4887-bcff-b7237897814f",
      "name": "OpenRouter DeepSeek R1"
    },
    {
      "parameters": {
        "model": "=deepseek-chat",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -3940,
        2240
      ],
      "id": "3efa92cf-5a2c-4d0e-b600-af19091622d6",
      "name": "DeepSeek V3 Model"
    },
    {
      "parameters": {
        "model": "=deepseek-reasoner",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -4260,
        3220
      ],
      "id": "1ef14de2-a150-4d13-82fa-d04461aa2d10",
      "name": "DeepSeek R1 Model1"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for creating clear and actionable prompts that guide a personal assistant in completing assigned tasks.  \n\n## Context  \n- The agent does not use tools or external resources.  \n- The focus is on providing concise, step-by-step instructions that the personal assistant can follow directly.  \n- Tasks may vary in complexity, but the instructions should remain simple and unambiguous.  \n\n## Instructions  \n1. Receive the task or goal from the user.  \n2. Break down the task into logical, sequential steps that are easy to follow.  \n3. Ensure each step is actionable and includes sufficient detail to avoid confusion.  \n4. Specify any required context or dependencies in the instructions.  \n5. Review the prompt to ensure clarity and completeness before outputting it.  \n\n## Examples  \n- Input: \"Schedule a doctor's appointment for next week.\"  \n- Output:  \n  1. Check the doctor's availability for next week.  \n  2. Choose a time that works with the existing schedule.  \n  3. Call the doctor's office or use the online booking system to make the appointment.  \n  4. Confirm the appointment and note it in the calendar.  \n\n- Input: \"Prepare for John's birthday party.\"  \n- Output:  \n  1. Decide on a date and time for the party.  \n  2. Create a guest list.  \n  3. Purchase decorations and set them up before the party.  \n  4. Arrange for food and drinks.  \n  5. Send out invitations and confirm RSVPs.  \n\n## SOP (Standard Operating Procedure)  \n1. Listen to the user’s task or goal.  \n2. Break the task into actionable steps, ensuring logical order and clarity.  \n3. Include any relevant details or context to avoid ambiguity.  \n4. Review and refine the prompt to ensure it is complete and easy to understand.  \n5. Output the finalized prompt for the personal assistant to follow.  \n\n## Final Notes  \n- Always ensure the instructions are as simple and clear as possible.  \n- Avoid including unnecessary information or overly complex phrasing.  \n- Focus on delivering a ready-to-follow plan without requiring further input.  \n- Here is today's date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -4260,
        3000
      ],
      "id": "5485ad0e-70c2-423f-8f7d-00b34188f3ff",
      "name": "DeepSeek Planner"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -3840,
        3080
      ],
      "id": "f11b920f-40d4-4bac-8a0e-0b66a88b6510",
      "name": "Tools Agent"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "text",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -3520,
        3260
      ],
      "id": "e9d1254c-69f0-49d7-a1d3-259d95919abc",
      "name": "Send Email Tool",
      "webhookId": "59161f12-3751-4c7d-aff3-8ecf362c6524"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -4000,
        3260
      ],
      "id": "4550a80b-ddc8-4772-a307-d6125f6a8f44",
      "name": "GPT-4o Mini"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.choices[0].message.content }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -4100,
        2560
      ],
      "id": "6376664c-2b87-49cf-b6ac-b3c3e57336f6",
      "name": "Tools Agent1"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "text",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -3820,
        2720
      ],
      "id": "68fb5808-0a49-46c9-9020-1ee4c57601bc",
      "name": "Send Email Tool1",
      "webhookId": "59161f12-3751-4c7d-aff3-8ecf362c6524"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -4140,
        2740
      ],
      "id": "5cdceb45-4285-48bc-bc1f-d3f83f40c948",
      "name": "GPT-4o Mini1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.deepseek.com/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer sk-44a781d7c41a46609eed26a64f5b3d69"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"deepseek-reasoner\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful assistant who is tasked with creating a step by step plan of action for a personal assistant\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.chatInput }}\"\n    }\n  ],\n  \"stream\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4300,
        2580
      ],
      "id": "f5a16255-5e10-459a-841e-29a7301b5a18",
      "name": "DeepSeek R1 Planner"
    },
    {
      "parameters": {},
      "id": "d99a4a66-7666-4e3b-a707-8107b7155b2b",
      "name": "Window Buffer Memory3",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -3460,
        2540
      ]
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a helpful assistant who tells jokes. "
        }
      },
      "id": "1a4042ec-54b6-4e95-ba5c-761fd89cb05c",
      "name": "AI Agent2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -3720,
        2220
      ]
    },
    {
      "parameters": {
        "content": "# DeepSeek R1 Agent (Don't do this)\n\n\n",
        "height": 280,
        "width": 960,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4320,
        2120
      ],
      "typeVersion": 1,
      "id": "a1a12d99-4ead-4bb3-83de-6a9618073ead",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "text",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -3280,
        2520
      ],
      "id": "f1354488-1074-4f83-b226-e0e9e4677b4f",
      "name": "Send Email2",
      "webhookId": "59161f12-3751-4c7d-aff3-8ecf362c6524"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "236239aa-13b2-432c-88ae-ab48503e1808",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3340,
        2940
      ],
      "id": "873d4755-28a9-4061-a395-10cb36361c2e",
      "name": "Response5"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "nateherk88@gmail.com",
          "mode": "list",
          "cachedResultName": "nateherk88@gmail.com"
        },
        "start": "={{ $fromAI(\"startTime\") }}",
        "end": "={{ $fromAI(\"endTime\") }}",
        "additionalFields": {
          "summary": "={{ $fromAI(\"eventTitle\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        -3300,
        3200
      ],
      "id": "54eb0b55-39a7-4cc4-a2d3-ae1975e28ff7",
      "name": "Create Event2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "236239aa-13b2-432c-88ae-ab48503e1808",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3600,
        2680
      ],
      "id": "d218523c-0f08-4a84-94f8-c4b24f8b49e6",
      "name": "Response6"
    },
    {
      "parameters": {
        "content": "# DeepSeek R1 Planner (HTTP Request)",
        "height": 540,
        "width": 1340
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4320,
        2880
      ],
      "typeVersion": 1,
      "id": "67e01cee-aa07-47e5-a96f-52c2d37f867b",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "# DeepSeek R1 Planner Agent",
        "height": 420,
        "width": 1180,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4320,
        2440
      ],
      "typeVersion": 1,
      "id": "6feed7b2-e61f-4549-91cf-3e267c741f09",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "744d489d-fe88-4d68-bc80-f41bb3f76ecd",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        4120,
        4620
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA",
          "mode": "list",
          "cachedResultName": "Contact Database",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA/edit#gid=0"
        },
        "options": {}
      },
      "id": "2cbdae6a-86dc-47f1-80d0-50fdd6db6e1b",
      "name": "contactData",
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        3860,
        4840
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "893acb82-4210-4b69-9436-ede2eae11004",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        3520,
        4620
      ],
      "webhookId": "44fd9c8a-250a-4c05-9035-91bf6f85d015"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "94ef236f-f23e-4678-853a-e1dc7fec580c",
      "name": "OpenAI Chat Model18",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3680,
        4840
      ]
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "text",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "d83bf00a-5455-42b4-a867-3f13fc3f9c3a",
      "name": "sendEmail1",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        3980,
        4840
      ],
      "webhookId": "0cd83f42-b3d7-4819-89d5-36038b54f9c1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Email for: {{ $json.body.to }}\nEmail content: {{ $json.body.emailContent }}",
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for drafting and sending professional emails based on user instructions. You have access to two tools: `contactData` to find email addresses and `sendEmail` to compose and send emails. Your objective is to identify the recipient's contact information, draft a professional email, and sign off as \"[Your Name]\" before sending.\n\n---\n\n## Tools  \n- **contactData**: Retrieves the recipient's email address based on their name.  \n  **Input**: Name (e.g., \"John Doe\").  \n  **Output**: Email address (e.g., \"johndoe@example.com\").  \n\n- **sendEmail**: Sends an email with a subject and body.  \n  **Input**:  \n  - `recipient`: Email address (e.g., \"johndoe@example.com\").  \n  - `subject`: Email subject (e.g., \"Meeting Request\").  \n  - `body`: Email body (e.g., \"Hi John, meeting is set for Tuesday.\").  "
        }
      },
      "id": "bc54ccb9-6b8a-4a0e-95a6-c574663dacf6",
      "name": "Email Agent3",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3740,
        4620
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "4d9b5c19-ce0b-406f-9569-32dde9303dc5",
      "name": "OpenAI Chat Model19",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -40,
        4540
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "592bb228-8826-4749-9d87-90bb811c8b29",
      "name": "Respond to Webhook1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        400,
        4320
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA",
          "mode": "list",
          "cachedResultName": "Contact Database",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19MEAwqL6LOhB9VNXW8TSDTBd1U8s0L77uWHpIhRieEA/edit#gid=0"
        },
        "options": {}
      },
      "id": "a3e31490-20bd-4307-ba36-cb9094152e53",
      "name": "contactData1",
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        140,
        4540
      ]
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "text",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "06791e75-1353-496b-a300-ecdb52e07aca",
      "name": "sendEmail2",
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        340,
        4540
      ],
      "webhookId": "0cd83f42-b3d7-4819-89d5-36038b54f9c1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "n8n",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "a405458c-8cf4-4e98-8ca1-019d129c8131",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -200,
        4320
      ],
      "webhookId": "44fd9c8a-250a-4c05-9035-91bf6f85d015"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Email for: {{ $json.body.to }}\nEmail content: {{ $json.body.emailContent }}",
        "options": {
          "systemMessage": "=# Overview  \nYou are an AI agent responsible for drafting and sending professional emails based on user instructions. You have access to two tools: `contactData` to find email addresses and `sendEmail` to compose and send emails. Your objective is to identify the recipient's contact information, draft a professional email, and sign off as \"[Your Name]\" before sending.\n\n---\n\n## Tools  \n- **contactData**: Retrieves the recipient's email address based on their name.  \n  **Input**: Name (e.g., \"John Doe\").  \n  **Output**: Email address (e.g., \"johndoe@example.com\").  \n\n- **sendEmail**: Sends an email with a subject and body.  \n  **Input**:  \n  - `recipient`: Email address (e.g., \"johndoe@example.com\").  \n  - `subject`: Email subject (e.g., \"Meeting Request\").  \n  - `body`: Email body (e.g., \"Hi John, meeting is set for Tuesday.\").  "
        }
      },
      "id": "560aeb4b-bcac-4d19-a00c-1d96958b50f1",
      "name": "Email Agent4",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        20,
        4320
      ]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/customsearch/v1?key=YOUR_API_KEY&cx=ENGINE_ID&q=CEO+real+estate+Chicago&num=10&start={{ $json.start }}\n",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
            }
          ]
        },
        "options": {}
      },
      "id": "4ef232ed-6f2c-4cd2-8acd-a385fc5af37b",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -420,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "let start = 0;  // Initial page\nconst limit = 100;  // Limit to fetch 500 profiles (adjust as needed)\nconst batchSize = 10;  // Google Search returns 100 results per page\nconst output = [];\n\n// Loop through pages by increments of 100\nwhile (start < limit) {\n  output.push({ json: { start: start } });\n  start += batchSize;  // Increment by 100 for each page\n}\n\nreturn output;\n"
      },
      "id": "3ee7f166-d35d-41db-afd5-d58334ef4ecb",
      "name": "Pagination1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        520
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "47b50c9d-77df-4bf3-8a5b-5fb1559b6a9b",
      "name": "Loop Over Items3",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -640,
        520
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the items array from the response\nconst items = $json[\"items\"];  // Access the items array directly from the response\n\n// Create an empty array to store the extracted URLs\nconst output = [];\n\nif (items && items.length > 0) {\n  // Loop over each item in the array and extract the 'link'\n  for (const item of items) {\n    if (item.link) {\n      // Push each extracted URL as a separate item in the output\n      output.push({\n        json: {\n          url: item.link,\n        }\n      });\n    }\n  }\n}\n\nreturn output;  // Return the array of URL items\n"
      },
      "id": "756e420a-9149-4319-8eeb-54effb95757a",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -220,
        540
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1_0bfvmyLdhc-j8QhCDDRVZQZvk5TNg7TYoUsvyh9MvY",
          "mode": "list",
          "cachedResultName": "Profiles Demo",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_0bfvmyLdhc-j8QhCDDRVZQZvk5TNg7TYoUsvyh9MvY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_0bfvmyLdhc-j8QhCDDRVZQZvk5TNg7TYoUsvyh9MvY/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "5283ee63-1ea9-444d-8162-0c8a672dfa78",
      "name": "Google Sheets1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -40,
        540
      ]
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a helpful assistant. You will use the vector database to retrieve relevant information and respond to the user's query."
        }
      },
      "id": "f8ec039a-3bea-4110-b86d-d65b220a5d30",
      "name": "RAG Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        840,
        2100
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "38d2dd32-1acd-4038-b953-7aa3fa53423d",
      "name": "OpenAI Chat Model20",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        680,
        2280
      ]
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "id": "946cda19-ad82-49bf-adee-ab9e96542fe3",
      "name": "Postgres Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.1,
      "position": [
        800,
        2280
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "92b13ef0-e265-424f-80cd-547472ae669e",
      "name": "OpenAI Chat Model21",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1160,
        2420
      ]
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "3e98af33-8b4e-4795-a5b0-f34cb2d16005",
      "name": "Supabase Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        900,
        2420
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "14d7acd7-efd7-4874-8aec-e3e439cccf66",
      "name": "Embeddings OpenAI8",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        780,
        2440
      ]
    },
    {
      "parameters": {
        "name": "project_data",
        "description": "Retrieve information about the projects"
      },
      "id": "9cdc2b17-da87-4186-b9e0-9ab3e80e2c01",
      "name": "Vector Store Tool2",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        940,
        2280
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e556566e-20a1-48b4-b01e-197a402b5a5f",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "db169b20-528c-4623-a39c-f61eb8622aa8",
      "name": "Set ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1280,
        1260
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "05c745d3-d34e-4178-9d42-2643b8a214dc",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1740,
        1260
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E",
          "mode": "list",
          "cachedResultName": "Projects",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "deb8de1e-b76e-4572-9dc7-de0be098a9c6",
      "name": "New File",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        1060,
        1260
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "6563e5dd-3de8-481f-8dfc-a5d17e2ad635",
      "name": "Downloading File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1500,
        1260
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set ID 2').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "7006371e-fc31-48fa-b7aa-0eaea23af0e6",
      "name": "Download File 2",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1640,
        1600
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "e71e9450-7216-4d8d-93cc-c79daf3bf323",
      "name": "Extract from File1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1820,
        1600
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b4433ac7-0b70-4405-a564-f3f78f784470",
              "name": "file_id",
              "value": "={{ $('File Updated1').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3243db5d-b155-4101-830e-a34a19c4d2d6",
      "name": "Set ID 2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1320,
        1600
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $json.id }}*"
      },
      "id": "c2bc924e-795d-4057-bd28-26a77f7b1f1e",
      "name": "Delete Row(s)",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1180,
        1600
      ]
    },
    {
      "parameters": {},
      "id": "b55bf787-c6a6-4ddf-8dbf-ee40d7d04536",
      "name": "Keep First ID",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1460,
        1600
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "c59637e9-06ab-41a8-a35e-3533af551528",
      "name": "Supabase Vector Store2",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1920,
        1260
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b2a8b446-980d-4049-ac0a-63fe989b5070",
      "name": "Embeddings OpenAI9",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        1860,
        1420
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E",
          "mode": "list",
          "cachedResultName": "Projects",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1TdnGrO0UFHboSBFMYCT1T0w17OwMct6E"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "f0fc06d6-5e2b-44ae-a1bc-ebf5137f8d29",
      "name": "File Updated1",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        1040,
        1600
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "450ae502-8dc1-499d-ba77-e3b1b89a9d5d",
      "name": "Supabase Vector Store3",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        2020,
        1600
      ]
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{ $('Set ID').item.json.file_id }}"
              }
            ]
          }
        }
      },
      "id": "e4d4b4c9-13b0-4322-a2bb-cd3a814f903c",
      "name": "Default Data Loader2",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1980,
        1420
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b62514c9-0312-4cfe-84a5-fdf7722aee5e",
      "name": "Recursive Character Text Splitter3",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2240,
        1420
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "40ee2232-1c04-4bf8-bf4b-d8ccc7dcfa5e",
      "name": "Embeddings OpenAI10",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        2060,
        1860
      ]
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "12ff3e85-4bd0-4045-bae1-9f61f9d5016a",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -3880,
        160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "7175fb75-edbc-48df-9512-b3c4cbf69e13",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        -2580,
        4160
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "f45d1fe0-6e10-4612-b3b0-49d1c3112aa0",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3480,
        4140
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "46a56bb6-73da-4409-9d4a-d724afbfb8ef",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        -3880,
        4020
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "674edf1e-42ad-4565-9c31-52f52201874a",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        -3840,
        4280
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "7de61bbd-ad6b-4b4f-b0e2-1e105008efe0",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        -3640,
        4360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "aad78c5c-7229-4836-8e41-f8e6d3010841",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        -3220,
        4360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "396e4f8c-5477-433f-9967-942a6ad8a13b",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -3080,
        4160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "bcc78a1b-44c6-46ad-9d87-53caa2fd8f83",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -3040,
        4320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "8205fa0a-2576-4945-9a0f-55efc2b696b7",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -3020,
        4520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_name }}"
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('When Executed by Another Workflow').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('When Executed by Another Workflow').first().json.name}} ({{$json.github_status}})"
      },
      "id": "e7557f0e-eba9-4650-bb19-48000d734331",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        -2800,
        4520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_name }}"
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('When Executed by Another Workflow').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('When Executed by Another Workflow').first().json.name}} ({{$json.github_status}})"
      },
      "id": "53405fd9-6efd-4c33-9b45-81f5a934d1ec",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        -2800,
        4320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "1d3e72e9-d86d-40ef-8113-6160fd06a112",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -4280,
        120
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('When Executed by Another Workflow').first().json.createdAt.split('-')[0] }}/{{ $('When Executed by Another Workflow').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "6c003c71-2f77-44ce-8380-209a452e1005",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        -3440,
        4360
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "9bb9ab0e-bae6-4aed-97f5-e1316ab7d3a5",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        -4080,
        60
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "38ae80e9-a38f-413f-8c2f-0e9c27e3390d",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        -3480,
        140
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=✅ Backup has completed - {{ $('n8n').all().length }} workflows have been processed.",
        "otherOptions": {}
      },
      "id": "ea630e7c-8c30-4512-8851-cafcddbd6aff",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        -3320,
        0
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=:x: Failed to backup {{ $('Loop Over Items4').item.json.id }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "a4faa384-3f37-4184-85ed-d50b3b721a75",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        -3220,
        180
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_name }}"
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $('When Executed by Another Workflow').first().json.createdAt.split('-')[0] }}/{{ $('When Executed by Another Workflow').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "5e18cc70-7bab-4578-a88b-4670d4dcc0cf",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        -4080,
        4020
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "={{ $vars.repo_owner }}"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "={{ $vars.repo_name }}"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "={{ $vars.repo_path }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "038960c6-1d08-41ca-8810-85d30a51592b",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        -4040,
        4340
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "71125de5-10fb-48de-9199-39117201b8b4",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4280,
        3960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6c7b747a-d0e2-446b-8e64-66b5379f145b",
      "name": "Loop Over Items4",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -3680,
        100
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "5b53b8e1-c423-41f3-b5be-a6b2ce1a5b89",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4700,
        3980
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "eeba6b53-f675-4346-8572-ba6a9c4325ac",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4320,
        -40
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Email Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Reply": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Emails": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Draft": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Labels": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Label Emails": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mark Unread": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Email Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tavily": {
      "ai_tool": [
        [
          {
            "node": "Content Creator Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Content Creator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Content Creator Agent": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contact Agent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Agent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set 'Text'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set 'Text'": {
      "main": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ultimate Assistant": {
      "main": [
        [
          {
            "node": "Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe": {
      "main": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent1": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Content Creator Agent1": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tavily1": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Calendar Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Agent1": {
      "main": [
        [
          {
            "node": "Success1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Contacts": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add or Update Contact": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Contact Agent1": {
      "main": [
        [
          {
            "node": "Response2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Newsletter Expert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Newsletter Expert": {
      "main": [
        [
          {
            "node": "Project Planner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Project Planner": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Research Team",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Research Team": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Editor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Editor": {
      "main": [
        [
          {
            "node": "Create TItle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create TItle": {
      "main": [
        [
          {
            "node": "Send Newsletter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tavily": {
      "ai_tool": [
        [
          {
            "node": "Research Team",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Newsletter Expert",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Newsletter Expert",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Research Team",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Editor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Tavily2": {
      "main": [
        [
          {
            "node": "response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Projects": {
      "ai_tool": [
        [
          {
            "node": "Projects Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Projects": {
      "ai_tool": [
        [
          {
            "node": "Projects Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Projects Agent": {
      "main": [
        [
          {
            "node": "Success2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Projects Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Message": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Knowledge Base",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge Base": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Contacts Data": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "🤖Calendar_Agent": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "🤖Research_Agent": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "🤖Projects_Agent": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "🤖___Email_Agent": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Personal Assistant": {
      "main": [
        [
          {
            "node": "Respond to Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Knowledge Base",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger1": {
      "main": [
        [
          {
            "node": "Personal Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator1": {
      "ai_tool": [
        [
          {
            "node": "Personal Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "Research Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia": {
      "ai_tool": [
        [
          {
            "node": "Research Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Hacker News": {
      "ai_tool": [
        [
          {
            "node": "Research Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Research Agent": {
      "main": [
        [
          {
            "node": "Success3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Research Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Chart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Technical Analysis": {
      "main": [
        [
          {
            "node": "Send Chart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Chart": {
      "main": [
        [
          {
            "node": "Technical Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Chart URL": {
      "main": [
        [
          {
            "node": "Download Chart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Ticker": {
      "main": [
        [
          {
            "node": "Get Chart URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Chart": {
      "main": [
        [
          {
            "node": "response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Internet": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger": {
      "main": [
        [
          {
            "node": "Set Search Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Search Fields": {
      "main": [
        [
          {
            "node": "Search Internet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Blog Writer": {
      "main": [
        [
          {
            "node": "Update Campaign",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn": {
      "main": [
        [
          {
            "node": "X",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "X": {
      "main": [
        [
          {
            "node": "Blog Writer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "LinkedIn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "X",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "Blog Writer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "LinkedIn",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sendEmail": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "contactDatabase": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory2": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "nvidia": {
      "ai_tool": [
        [
          {
            "node": "Claude 3.5 Sonnet Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "nvidia1": {
      "ai_tool": [
        [
          {
            "node": "GPT-4o Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o": {
      "ai_languageModel": [
        [
          {
            "node": "GPT-4o Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Claude 3.5 Sonnet": {
      "ai_languageModel": [
        [
          {
            "node": "Claude 3.5 Sonnet Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "nvidia2": {
      "ai_tool": [
        [
          {
            "node": "GPT-4o Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Flash 2.0": {
      "ai_languageModel": [
        [
          {
            "node": "GPT-4o Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Flash 2.0_": {
      "ai_languageModel": [
        [
          {
            "node": "nvidia2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o_": {
      "ai_languageModel": [
        [
          {
            "node": "nvidia1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Claude 3.5 Sonnet_": {
      "ai_languageModel": [
        [
          {
            "node": "nvidia",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store3": {
      "ai_vectorStore": [
        [
          {
            "node": "nvidia",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI3": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Set Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Content": {
      "main": [
        [
          {
            "node": "Customer Support Eval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Customer Support Eval": {
      "main": [
        [
          {
            "node": "Customer Support?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "ai_tool": [
        [
          {
            "node": "Customer Support Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "createDraft": {
      "ai_tool": [
        [
          {
            "node": "Customer Support Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Customer Support Agent": {
      "main": [
        [
          {
            "node": "Response3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Customer Support?": {
      "main": [
        [
          {
            "node": "Customer Support Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response Not Customer Support",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "Customer Support Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Download File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI4": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Download File1": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Doc Rows": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Google Doc1": {
      "main": [
        [
          {
            "node": "Delete File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Delete Old Doc Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel1": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Google Doc2": {
      "main": [
        [
          {
            "node": "Delete File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize1": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text1": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Default Data Loader2": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Created": {
      "main": [
        [
          {
            "node": "Set File ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Updated": {
      "main": [
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Text File": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Text File1": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Set Version",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "New RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool1",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Text File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Google Doc1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Google Doc1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Google Doc1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Version": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate2": {
      "main": [
        [
          {
            "node": "Summarize1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File3": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate3": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI5": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter2": {
      "ai_textSplitter": [
        [
          {
            "node": "Enhanced Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI6": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Extract PDF Text1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Text File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Google Doc2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Google Doc2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Google Doc2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "New RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool1": {
      "ai_tool": [
        [
          {
            "node": "New RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI7": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Get Messages": {
      "ai_tool": [
        [
          {
            "node": "Email Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "Email Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send Email1": {
      "ai_tool": [
        [
          {
            "node": "Email Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent2": {
      "main": [
        [
          {
            "node": "Response4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek R1 Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek R1 Model1": {
      "ai_languageModel": [
        [
          {
            "node": "DeepSeek Planner",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Planner": {
      "main": [
        [
          {
            "node": "Tools Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Tool": {
      "ai_tool": [
        [
          {
            "node": "Tools Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o Mini": {
      "ai_languageModel": [
        [
          {
            "node": "Tools Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Tools Agent": {
      "main": [
        [
          {
            "node": "Response5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tools Agent1": {
      "main": [
        [
          {
            "node": "Response6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Tool1": {
      "ai_tool": [
        [
          {
            "node": "Tools Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o Mini1": {
      "ai_languageModel": [
        [
          {
            "node": "Tools Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek R1 Planner": {
      "main": [
        [
          {
            "node": "Tools Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory3": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Send Email2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event2": {
      "ai_tool": [
        [
          {
            "node": "Tools Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "contactData": {
      "ai_tool": [
        [
          {
            "node": "Email Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Email Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "Email Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "sendEmail1": {
      "ai_tool": [
        [
          {
            "node": "Email Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent3": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model19": {
      "ai_languageModel": [
        [
          {
            "node": "Email Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "contactData1": {
      "ai_tool": [
        [
          {
            "node": "Email Agent4",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "sendEmail2": {
      "ai_tool": [
        [
          {
            "node": "Email Agent4",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Email Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent4": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination1": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model20": {
      "ai_languageModel": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model21": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool2",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI8": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool2": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set ID": {
      "main": [
        [
          {
            "node": "Downloading File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New File": {
      "main": [
        [
          {
            "node": "Set ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Downloading File": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File 2": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Supabase Vector Store3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set ID 2": {
      "main": [
        [
          {
            "node": "Keep First ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Row(s)": {
      "main": [
        [
          {
            "node": "Set ID 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keep First ID": {
      "main": [
        [
          {
            "node": "Download File 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI9": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "File Updated1": {
      "main": [
        [
          {
            "node": "Delete Row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader2": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter3": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader2",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI10": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items4": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bfca2e2c-d6ce-48a7-a5a2-92ecbffd4e6d",
  "meta": {
    "instanceId": "5c67ddd5599c0e3093bbea6778254cff8ff996ae2b8722ba7c004551820eaa07"
  },
  "id": "smQzYI7SptEmugqk",
  "tags": []
}