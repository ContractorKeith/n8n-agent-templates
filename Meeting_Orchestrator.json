{
  "name": "Meeting Orchestrator",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -340,
        -40
      ],
      "id": "39ef2882-5cfe-4a3b-b02e-b7c82f9c5d8c",
      "name": "Telegram Trigger",
      "webhookId": "bffb7502-df2f-46df-b8e4-90d7f1647730",
      "credentials": {
        "telegramApi": {
          "id": "ibOBUAJC1UR5oFZX",
          "name": "Telegram account 8"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a6d6da92-8272-4f6f-97be-7b733fc5b6d2",
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "voice"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -140,
        -40
      ],
      "id": "eff7915e-8746-44de-a17f-290fbb8bac54",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "13f27e1a-8d2b-4e19-afe4-ee282c5098a7",
              "name": "=text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        220,
        -180
      ],
      "id": "f88231be-cdc4-45de-a3b8-20ff1eaeee60",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        600,
        160
      ],
      "id": "6d61621f-5172-4a45-b915-b5f037faa201",
      "name": "memory"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        480,
        160
      ],
      "id": "8623eceb-8e2f-4a78-a7bf-077946520f86",
      "name": "4o-mini",
      "credentials": {
        "openAiApi": {
          "id": "W4zrTBTGKpvttbfp",
          "name": "OpenAi account 6"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        100,
        40
      ],
      "id": "99f06c10-ff70-4df1-aee4-b45628984f11",
      "name": "Telegram2",
      "credentials": {
        "telegramApi": {
          "id": "ibOBUAJC1UR5oFZX",
          "name": "Telegram account 8"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1040,
        -60
      ],
      "id": "61e6b4f0-a6bf-4bd6-a51e-4e7dcdb5fce7",
      "name": "Telegram",
      "credentials": {
        "telegramApi": {
          "id": "ibOBUAJC1UR5oFZX",
          "name": "Telegram account 8"
        }
      }
    },
    {
      "parameters": {
        "agent": "openAiFunctionsAgent",
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=<Role>\nYou are a professional meeting manager. Your job is to control the flow of data\nand call the right tools to fulfill the user's request.\n</Role>\n\n<Goal>\nCreate and manage meetings for the user with their CRM, Google Calendar and Zoom.\n</Goal>\n\n<Instructions>\n    <Instruction>Today's date is {{ $now }}.</Instruction>\n    <Instruction>You have access to all necessary following tools: Calendar, CRM, Zoom, Email. You should only report back to the user if critical information is unavailable. You can find people's emails and contact info in the CRM Area.\n</Instruction>\n\n<Instruction>\nAnytime the user requests for specific information regarding calendar events, zoom calls, CRM, or Emails, make sure you send the query to the respective area. Don't rely on memory. Always double check.\n</Instruction>\n\n<Instruction>\n When the user wants to create a meeting, determine the following:\n  <Details>\n    Who?\n    About what?\n    When?\n    Where?\n    Attendee availability?\n  </Details>\n</Instruction>\n\n<Calendar-Instruction>\nOnce you have these details, go through the following steps:\n  <Steps>\n    <Step-1>Search the CRM to see if the attendee already exists.</Step-1>\n\n    <Step-2>\nIf the attendee is in the CRM, use their details to create a Google Calendar event.\n    </Step-2>\n\n    <Step-3>\nIf the attendee is not in the CRM, request their contact information (Name, Email, Company Name, and Notes) and add them to the CRM before creating the event.\n    </Step-3>\n\n     <Step-4>\nWhen creating a claendar always create an event description that can be added to the event description in Google Calendar, even if it's small. \n    </Step-4>\n\n  </Steps>\n</Calendar-Instruction>\n\n<Zoom-Instruction>\nIf the user requests a virtual meeting or a Zoom call:\n  <Steps>\n    <Step-1>Create the event on Google Calendar.</Step-1>\n\n    <Step-2>\nCreate a Zoom call for the same time slot with a topic and agenda based on the user query.\n    </Step-2>\n\n    <Step-3>\nUpdate the Google Calendar event to include the Zoom link in the event description.\n    </Step-3>\n  </Steps>\n</Zoom-Instruction>\n\n<Email-Instruction>\nIf the user requests to send someone an email, first check the CRM to find the person they are requesting to send an email to, then draft an email and send it to the user for review to get sending confirmation.\n  </Instruction>\n</Instructions>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        560,
        -60
      ],
      "id": "5d48cac8-b5e7-46e9-b56f-dc94120bda0a",
      "name": "Orchestrator Agent"
    },
    {
      "parameters": {
        "name": "Zoom_Area",
        "description": "Call this tool to create new zoom meetings and search for upcoming zoom meetings",
        "workflowId": {
          "__rl": true,
          "value": "GLYeVKCNJvtnYbv3",
          "mode": "list",
          "cachedResultName": "Zoom Manager"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('userQuery','the query of the user to pass to the zoom area') }}",
            "telegramID": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
          },
          "matchingColumns": [
            "chatInput"
          ],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "chatInput",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telegramID",
              "displayName": "telegramID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        800,
        340
      ],
      "id": "9b241718-dbc1-46a5-8cc2-ae86c27ea583",
      "name": "zoom manager"
    },
    {
      "parameters": {
        "name": "Google_Calendar_Events",
        "description": "Call this tool in order to search, update, or create events in Google Calendar.",
        "workflowId": {
          "__rl": true,
          "value": "oLyZrByFqi0WCwPC",
          "mode": "list",
          "cachedResultName": "Google Calendar Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "telegramID": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
            "chatInput": "={{ $fromAI('query','google calendar event details query from user and chatbot') }}"
          },
          "matchingColumns": [
            "chatInput"
          ],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "chatInput",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "telegramID",
              "displayName": "telegramID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        640,
        340
      ],
      "id": "6633a53b-ff34-42fc-89d2-4c396f7d05bf",
      "name": "calendar manager"
    },
    {
      "parameters": {
        "name": "CRM_Area",
        "description": "Call this tool to create new contacts, update contacts or search contacts in my Airtable CRM",
        "workflowId": {
          "__rl": true,
          "value": "sedRJgHMqRtPf4zG",
          "mode": "list",
          "cachedResultName": "CRM Area"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('crmQuery','query with requested CRM changes or additions') }}"
          },
          "matchingColumns": [
            "chatInput"
          ],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "chatInput",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        980,
        340
      ],
      "id": "b9d70966-ceaa-423c-87bc-763f6adbc993",
      "name": "crm manager"
    },
    {
      "parameters": {
        "name": "email_sending",
        "description": "Call this tool to send event details to the attendee of the meeting.",
        "workflowId": {
          "__rl": true,
          "value": "E0DVvIpnQ0jQrRDi",
          "mode": "list",
          "cachedResultName": "Email Area"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "chatInput": "={{ $fromAI('eventDetails','all details of event to email to attendee') }}",
            "telegramID": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chatInput",
              "displayName": "chatInput",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telegramID",
              "displayName": "telegramID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1160,
        340
      ],
      "id": "f560bce2-aaa6-4dd7-bc6f-4374440a7dbe",
      "name": "email manager"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        300,
        40
      ],
      "id": "77a8acd9-4a89-45dd-adc7-00f37f615ac6",
      "name": "OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "9azA55avyYwOSI3p",
          "name": "OpenAi account 12"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "memory": {
      "ai_memory": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "4o-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram2": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Orchestrator Agent": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "zoom manager": {
      "ai_tool": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "calendar manager": {
      "ai_tool": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "crm manager": {
      "ai_tool": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "email manager": {
      "ai_tool": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "434870ca-96af-47f1-b3b5-f47c822c7521",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "19954721cad48ea56aa7928cde145d83fde57fd99df7821bc6e32e387cfc0338"
  },
  "id": "3siTuwSOTFWDIVBH",
  "tags": [
    {
      "createdAt": "2025-02-04T23:14:29.586Z",
      "updatedAt": "2025-02-04T23:14:29.586Z",
      "id": "Swv7crmRBufO4U2s",
      "name": "GCA"
    },
    {
      "createdAt": "2025-02-04T23:14:48.918Z",
      "updatedAt": "2025-02-04T23:14:48.918Z",
      "id": "jeNX0W6H8ObF2zzq",
      "name": "Orchestrator"
    }
  ]
}